/*
先对输入数组排序，按照h升序，k降序 
从头循环遍历 当前这个人就是剩下未安排的人中最矮的人，他的k值就代表他在剩余空位的索引值 
                    如果有多个人高度相同，要按照k值从大到小领取索引值 

示例：
[ 0, 1, 2, 3, 4, 5 ] [ 4, 4 ] 4
[ 0, 1, 2, 3, 5 ]    [ 5, 2 ] 2
[ 0, 1, 3, 5 ]       [ 5, 0 ] 0
[ 1, 3, 5 ]          [ 6, 1 ] 3
[ 1, 5 ]             [ 7, 1 ] 5
[ 1 ]                [ 7, 0 ] 1
[ [ 5, 0 ], [ 7, 0 ], [ 5, 2 ], [ 6, 1 ], [ 4, 4 ], [ 7, 1 ] ]
*/
class Solution {
public:
    vector<vector<int>> reconstructQueue(vector<vector<int>>& people) {
        // 对输入数组排序 按照h升序 h相同时按k降序
        sort(people.begin(), people.end(),
             [](vector<int>& l, vector<int>& r) {
                if (l[0] != r[0]) {
                    return l[0] < r[0];
                }
                return l[1] > r[1];
            });

        vector<int> index(people.size());
        for (int i = 0; i < index.size(); ++i) {
            index[i] = i;
        }

        vector<vector<int>> res(people.size());
        for (vector<int>& p : people) {
            // 安排位置
            int idx = index[p[1]];
            res[idx] = p;
            // 删除这个位置
            auto iter = find(index.begin(), index.end(), idx);
            index.erase(iter); 
        }
        return res;
    }
};