// 构造大的网格  然后对大网格进行DFS
// 把每一个网格构造成2*2的田格  其中有斜线的区域是1  空格是0   如下图示：
//  '\'   '/'    ' '
//  100   001    000
//  010   010    000
//  001   100    000
class Solution {
public:
    int regionsBySlashes(vector<string>& grid) {
        int N = grid.size();
        // 构造大网格
        vector<vector<int> > bigGrid(3*N, vector<int>(3*N, 0));
        for (int i = 0; i < N; ++i) {
            for (int j = 0; j < N; ++j) {
                int r = 3 * i + 1;
                int c = 3 * j + 1;
                if (grid[i][j] == '/') {
                    bigGrid[r-1][c+1] = bigGrid[r][c] = bigGrid[r+1][c-1] = 1;
                } else if (grid[i][j] == '\\') {
                    bigGrid[r-1][c-1] = bigGrid[r][c] = bigGrid[r+1][c+1] = 1;
                }
            }
        }
        // 对大网格进行DFS 同时抹去这一片区域
        int cnt = 0;
        for (int i = 0; i < bigGrid.size(); ++i) {
            for (int j = 0; j < bigGrid[0].size(); ++j) {
                if (bigGrid[i][j] == 0) {
                    dfs(bigGrid, i, j);
                    ++cnt;
                }
            }
        }
        return cnt;
    }

private:
    void dfs(vector<vector<int>>& bigGrid, int i, int j) {
        if(i < 0 || i >= bigGrid.size() || j < 0 || j >= bigGrid[0].size()){
            return;
        }
        if (bigGrid[i][j] == 1) {
            return;
        }
        bigGrid[i][j] = 1;
        dfs(bigGrid, i-1, j);
        dfs(bigGrid, i+1, j);
        dfs(bigGrid, i, j-1);
        dfs(bigGrid, i, j+1);

    }
};