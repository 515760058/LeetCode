/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if (root == nullptr) {
            return nullptr;
        }
        // 已经碰到p或q  说明p或q就是祖先节点
        if (root->val == p->val || root->val == q->val) {
            return root;
        }
        bool pLeft = inThisTree(root->left, p);
        bool qLeft = inThisTree(root->left, q);
        // p和q 都在左子树
        if (pLeft && qLeft) {
            return lowestCommonAncestor(root->left, p, q);
        }
        // p和q 都在右子树
        if ((!pLeft) && (!qLeft)) {
            return lowestCommonAncestor(root->right, p, q);
        }
        // p和q 一个在左子树 一个在右子树
        return root;
    }

private:
    // 判断一个节点是否在这棵树中
    bool inThisTree(TreeNode* root, TreeNode* node) {
        if (root == nullptr) {
            return false;
        }
        if (root->val == node->val) {
            return true;
        }
        return inThisTree(root->left, node) || inThisTree(root->right, node);
    }
};