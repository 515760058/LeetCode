/*
任何正整数都可以拆分成不超过4个数的平方和 ---> 答案只可能是1,2,3,4
    (1)如果一个数最少可以拆成4个数的平方和，则这个数还满足 n = (4^a)*(8b+7) ---> 因此可以先看这个数是否满足上述公式，如果不满足，答案就是1,2,3了
    (2)如果这个数本来就是某个数的平方，那么答案就是1，否则答案就只剩2,3了
    (3)如果答案是2，即n=a^2+b^2，那么我们可以枚举a，来验证，如果验证通过则答案是2
    (4)只能是3
*/
class Solution {
public:
    // 四平方和定理: 任何一个正整数都可以表示成不超过四个整数的平方之和
    int numSquares(int n) {
        // 情况1：满足n=4^a(8b+7)的时候，可以写成四个平方数之和
        while (n % 4 == 0) {
            n /= 4;
        }
        if(n % 8 == 7) {
            return 4;
        }
        // 情况2：满足这个数本身就是某个数的平方，那么答案就是1
        int r = (int)sqrt(n);
        if(r*r == n) {
            return 1;
        }
        // 情况3：这个数写成两个数的平方之和
        for (int i = 1; i*i <= n; i++) {
            int temp = (int) sqrt(n - i*i);
            if (n == temp*temp + i*i) {
                return 2;
            }
        }
        // 剩下最后一种情况
        return 3;
    }
};

/*
class Solution {
public:
    // dp不是最优解 可以作为练习dp使用
    int numSquares(int n) {
        vector<int> dp(n+1, INT_MAX);
        for (int i = 0; i*i <= n; i++) {
            dp[i*i] = 1;
        }

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j*j <= i; j++) {
                dp[i] = min(dp[i], dp[i-j*j] + 1);
            }
        }

        return dp[n];
    }
};
*/