// BFS
class Solution {
public:
    vector<int> shortestAlternatingPaths(int n, vector<vector<int>>& red_edges, vector<vector<int>>& blue_edges) {
        // 由于存在自环或者平行边，所以定义哈希表保存每个结点对应的多条边并初始化
        unordered_map<int, vector<int>> redGraph;
        unordered_map<int, vector<int>> blueGraph;
        for (auto& red : red_edges) {
            redGraph[red[0]].push_back(red[1]);
        }
        for (auto& blue : blue_edges) {
            blueGraph[blue[0]].push_back(blue[1]);
        }

        // 由于存在环和平行边 用数组visit[n][n][color]=true代表从节点x到节点y的且颜色为color的边被访问过 以防止重复访问
        int visit[n][n][2]; // 数组visit的第三维[2]有两维: 第0维代表红色是否访问 第1维代表蓝色是否访问
        memset(visit,0,sizeof(visit)); // 所有的点初始化为0代表未被访问过
        
        int step = 0; // step用于记录当前的步长 即从节点0到各节点的步长 从0逐渐+1自增
        vector<int> res(n, INT_MAX); // res代表节点0到节点x的最短路径的长度 初始化为最大值

        // BFS 定义队列并初始化
        queue<pair<int, int>> myQue; // pair<int, int>表示<当前节点, 路径上颜色>
        myQue.push(make_pair(0, 1)); // 队列初始化先放入<0, 1>先访问蓝色  再放入<0, 0>再访问红色
        myQue.push(make_pair(0, 0));

        while(!myQue.empty()) {
            ++step;
            int size = myQue.size();
            for(int i=0; i < size; ++i) {
                // 队首节点及颜色
                int curNode = myQue.front().first;
                int curColor = myQue.front().second;
                myQue.pop();
                // 若当前已访问的为蓝色边 则希望下一个节点的边是红色 反之亦然
                if (curColor == 1) {
                    // 遍历当前节点每一个相邻的节点 寻找相连的红色边
                    for (auto& nextNode: blueGraph[curNode]) {
                        // 如果curNode和nextNode相连的红色边未被访问过 则访问并加入队列
                        if(visit[curNode][nextNode][0] == 0) {
                            res[nextNode] = min(res[nextNode], step); // 同时需要更新两点之间的最短路径
                            // make_pair<nextNode, 0>表示标记当前访问的边为红色 下次应该访问蓝色的
                            myQue.push(make_pair(nextNode, 0));
                            visit[curNode][nextNode][0] = 1;
                        }
                    }
                } else if (curColor == 0) {
                    // 遍历当前节点每一个相邻的节点，寻找相连的蓝色边
                    for (auto& nextNode: redGraph[curNode]) {
                        // 如果curNode和nextNode相连的蓝色边未被访问过 则访问并加入队列
                        if (visit[curNode][nextNode][1] == 0) {
                            res[nextNode] = min(res[nextNode], step); // 同时需要更新两点之间的最短路径
                            // make_pair<nextNode, 1>表示标记当前访问的边为蓝色，下次应该访问红色的
                            myQue.push(make_pair(nextNode, 1));
                            visit[curNode][nextNode][1] = 1;
                        }
                    }
                }
            }
        }
        // 根据题意 0到自身的距离为0
        // 在上述操作后 若0到其他节点距离仍为INT_MAX 则说明不存在符合要求的路径 因此设置为-1
        res[0] = 0;
        for (int& distance : res) {
            if (distance == INT_MAX) {
                distance = -1;
            }
        }
        return res;
    }
};