struct Pair {
    string word;
    int freq;
    // 定制的排序
    bool operator< (const Pair& p) {
        if (this->freq == p.freq) {
            return this->word < p.word;
        }
        return this->freq > p.freq;
    }
};

class Solution {
public:
    vector<string> topKFrequent(vector<string>& words, int k) {
        // 统计每个单词的出现频率
        map<string, int> my_map;
        for (string& word : words) {
            ++my_map[word];
        }
        // 根据频率和字典序 进行排序
        vector<Pair> vec;
        for (auto& temp : my_map) {
            Pair p {temp.first, temp.second};
            vec.push_back(p);
        }
        sort(vec.begin(), vec.end());
        /* struct Pair中不定义operator<  使用lambda进行排序
        sort(vec.begin(),
             vec.end(),
             [](const Pair& p1, const Pair& p2) { // lambda
                if (p1.freq == p2.freq) {
                    return p1.word < p2.word;
                }
                return p1.freq > p2.freq;
             }
            );
        */

        // 输出结果
        vector<string> res;
        for (int i = 0; i < k; ++i) {
            res.push_back(vec[i].word);
        }
        return res;
    }
};