/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        if (preorder.empty()) {
            return nullptr;
        }
        // 在中序遍历中 每个元素的下标 便于后面查找
        map<int, int> m;
        for(int i = 0; i < inorder.size(); ++i){
            m[inorder[i]] = i;
        }
        // 开始重建
        return buildTree(m, preorder,inorder,0,preorder.size()-1,0,inorder.size()-1);
    }

private:
    TreeNode* buildTree(map<int, int>& m, vector<int>& preorder, vector<int>& inorder,int preBeg, int preEnd, int inBeg, int inEnd){
        if (preBeg > preEnd || inBeg > inEnd) {
            return nullptr;
        }
        // 前序的第一个节点 就是根节点
        TreeNode* node = new TreeNode(preorder[preBeg]);
        //if (preBeg == preEnd) return node;
        int leftLen = m[preorder[preBeg]] - inBeg; // 左子树的宽度
        node->left = buildTree(m, preorder, inorder, preBeg+1, preBeg+leftLen, inBeg, inBeg+leftLen-1);
        node->right = buildTree(m, preorder, inorder, preBeg+1+leftLen, preEnd, inBeg+leftLen+1, inEnd);
        return node;
    }
};