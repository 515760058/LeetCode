// step1：先找边界上的O,利用DFS把边界O相连通的O都改成其他字母(比如改成A)
// step2：把剩余的O该改成X  
// step3: 最后把A改成O 恢复原来的边界O
class Solution {
public:
    void solve(vector<vector<char>>& board) {
        if (board.empty()) {
            return;
        }
        // step1
        //第一行和最后一行
        for (int j = 0; j < board[0].size(); ++j){
            if (board[0][j] == 'O') {
                DFS(board, 0, j);
            }
            if (board[board.size()-1][j] == 'O') {
                DFS(board, board.size()-1, j);
            }
        }
        //第一列和最后一列
        for (int i = 0; i < board.size(); ++i){
            if (board[i][0] == 'O') {
                DFS(board, i, 0);
            }
            if (board[i][board[0].size()-1] == 'O') {
                DFS(board, i, board[0].size()-1);
            }
        }
        
        //step2 & step3
        for(int i = 0; i < board.size(); ++i){
            for(int j = 0; j < board[0].size(); ++j){
                if(board[i][j] == 'O'){
                    board[i][j] = 'X';
                }
                if(board[i][j] == 'A'){
                    board[i][j] = 'O';
                }
            }
        }
    }

private:
    //DFS把和边界O连通的O都改成其他字母(比如改成A)
    void DFS(vector<vector<char>>& board, int i, int j){
        if(i < 0 || i >= board.size() || j < 0 || j >= board[0].size()){
            return;
        }
        if (board[i][j] != 'O') {
            return;
        }
        board[i][j] = 'A'; // 把边界的O都改成A
        DFS(board, i+1, j);
        DFS(board, i-1, j);
        DFS(board, i, j+1);
        DFS(board, i, j-1);
    }
};