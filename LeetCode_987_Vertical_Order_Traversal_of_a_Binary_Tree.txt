/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

// leetcode102 层序遍历  记录每个节点的深度和垂度
// 假设当前节点的垂度索引是x, 则其左子树节点垂度是x-1, 右子树节点垂度是x+1.
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        map<int, vector<MyNode>> mymap; // key:垂序索引 value:对应的数组
        preOrder(root, 0, 0, mymap); // 根节点的垂度视为0 深度也视为0

        // 根据深度对垂序进行排序 并转成二维数组
        vector<vector<int>> res;
        for (auto& element : mymap) {
            // 对每个垂度数组(element.second)进行排序
            sort(element.second.begin(), element.second.end());
            // 将这个垂度数组 转成结果数组
            vector<int> temp;
            for (auto& mynode : element.second) {
                temp.push_back(mynode.val);
            }
            res.push_back(temp);
        }
        return res;
    }

private:
    // 记录节点的值 及其深度
    struct MyNode {
        int val;
        int depth;
        MyNode(int _val, int _depth) {
            val = _val;
            depth = _depth;
        }
        // 排序 先按深度从小到大, 深度相同就按值从小到大
        bool operator < (const MyNode& rhs) {
            if (this->depth != rhs.depth) {
                return this->depth < rhs.depth;
            }
            return this->val < rhs.val;
        }
    };

    // 使用先序遍历的方式实现垂序遍历 结果保存在mymap中
    // vertical垂度  depth深度
    void preOrder(TreeNode* node, int vertical, int depth, map<int, vector<MyNode>>& mymap) {
        if (node == nullptr) {
            return;
        }
        mymap[vertical].push_back( MyNode(node->val, depth) );
        preOrder(node->left,  vertical-1, depth+1, mymap); // 左子树 垂度-1
        preOrder(node->right, vertical+1, depth+1, mymap); // 右子树 垂度+1
    }
};