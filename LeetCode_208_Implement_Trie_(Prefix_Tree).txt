class Trie {
public:
    /* ctor */
    Trie() {}

    /* dtor */
    ~Trie() {
        for (int i = 0; i < LETTER_NUM; ++i) {
            if (data[i] != nullptr) {
                delete(data[i]);
                data[i] = nullptr;
            }
        }
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        Trie* node = this;
        for (char c : word) {
			int idx = c - 'a';
            if (node->data[idx] == nullptr) {
                node->data[idx] = new Trie();
            }
            node = node->data[idx];
        }
        node->is_string = true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        Trie* node = this;
        for (char c : word) {
			int idx = c - 'a';
            if (node->data[idx] == nullptr) {
                return false;
            }
            node = node->data[idx];
        }
        return node->is_string;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        Trie* node = this;
        for (char c : prefix) {
			int idx = c - 'a';
            if (node->data[idx] == nullptr) {
                return false;
            }
            node = node->data[idx];
        }
        return true;
    }

private:
    static const int LETTER_NUM = 26;

    bool is_string = false;
    Trie* data[LETTER_NUM] = {nullptr};
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */