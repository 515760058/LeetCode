//回溯法
class Solution {
public:
    string getPermutation(int n, int k) {
        //生成数据
        vector<int> nums(n);
        for(int i = 0; i < n; ++i){
            nums[i] = i + 1;
        }
        //回溯
        vector<bool> visited(nums.size(), false);//每个数字是否使用过
        vector<int> temp;
        string res;
        helper(visited, temp, nums, k, res);//回溯
        return res;
    }

private:
    void helper(vector<bool>& visited, vector<int>& temp, vector<int>& nums, int& k, string& res){
        if(k <= 0){//已经找到第k个排列
            return;
        }
        if(temp.size() == nums.size()){//一个合法排列
            --k;
            if(k == 0){//把第k个排列记录在res中
                for(int n : temp){
                    res += to_string(n);
                }
            }
            //cout << k << "  "  << str << endl;
            return;
        }
        for(int i = 0; i < nums.size(); ++i){
            if(visited[i] == false){//该数字没被使用过
                visited[i] = true;
                temp.push_back(nums[i]);
                helper(visited, temp, nums, k, res);//放入该数字，进入下一层
                temp.pop_back();
                visited[i] = false;
            }
        }
    }
};