//BFS求解最小问题  位压缩
class Solution {
public:  
    int minFlips(vector<vector<int>>& mat) {
        int row = mat.size();
        int col = mat[0].size();
        //生成初始状态start
        int start = 0;
        for(int i = 0; i < row; ++i){
            for(int j = 0; j < col; ++j){
                if(mat[i][j] == 1){
                    bitSet(start, i*col+j);
                }
            }
        }
        if(start == 0){
            return 0;
        }
        //开始BFS
        vector<vector<int>> offsets = {{-1,0}, {1,0}, {0,-1}, {0,1}, {0,0}};//上下左右及自己
        queue<int> qu;//队列
        qu.push(start);
        map<int, int> mymap;//key:状态  value:翻转次数
        mymap[start] = 0;
        while(!qu.empty()){
            int curr = qu.front();
            qu.pop();

            for(int i = 0; i < row; ++i){
                for(int j = 0; j < col; ++j){
                    int next = curr;//反转mat[i, j]位置，得到新的状态next
                    for(auto offset : offsets){
                        bitReverse(mat, next, i+offset[0], j+offset[1]);
                    }
                    if(next == 0){//找到了全0矩阵
                        return mymap[curr] + 1;
                    }
                    if(mymap.count(next) == 0){//以前未出现过的状态，记录下来
                        qu.push(next);
                        mymap[next] = mymap[curr] + 1;
                    }
                }
            }
        }
        return -1;
    }

private:
    //翻转一个比特位
    inline void bitReverse(vector<vector<int>>& mat, int& num, int i, int j){
        int row = mat.size();
        int col = mat[0].size();
        if(i < 0 || j < 0 || i >= row || j >= col){
            return;
        }
        int n = i * row + j;
        if(bitTst(num, n)){
            bitClr(num, n);
        }else{
            bitSet(num, n);
        }
    }

    //将第n比特设为1
    inline void bitSet(int& num, int n){
        num |= (1 << n);
    }

    //第n比特是否为1
    inline bool bitTst(int num, int n){
        if(num & (1 << n)){
            return true;
        }
        return false;
    }

    //将第n比特设为0
    inline void bitClr(int& num, int n){
        num &= (~(1 << n));
    }
};