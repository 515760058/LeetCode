// 分别保存每种颜色的下标 + 然后在目标颜色中进行二分查找
class Solution {
public:
    vector<int> shortestDistanceColor(vector<int>& colors, vector<vector<int>>& queries) {
        // 分别保存每种颜色的下标
        vector<vector<int>> colorsIdx(4, vector<int>());
        for (int i = 0; i < colors.size(); ++i) {
            colorsIdx[colors[i]].push_back(i);
        }
        // 
        vector<int> result(queries.size(), -1);
        for (int i = 0; i < queries.size(); ++i) {
            // 要搜索的数组
            int target = queries[i][0];
            int color = queries[i][1];
            vector<int>& v = colorsIdx[color];
            if (v.empty()) {
                continue;
            }
            // 二分查找 target最接近的值
            int idx = lower_bound(v.begin(), v.end(), target) - v.begin(); // 第一个>=target的数字的下标
            if (idx == v.size()) { // 所有的数都 <= target
                result[i] = target - v[idx-1];
            } else if (idx == 0) { // target <= 所有的数
                result[i] = v[0] - target;
            } else if (v[idx] == target) { // 找到target
                result[i] = 0;
            } else { // 数组中没有target 即: v[idx-1] < target < v[idx]
                result[i] = min(target-v[idx-1], v[idx]-target);
            }
        }
        return result;
    }
};