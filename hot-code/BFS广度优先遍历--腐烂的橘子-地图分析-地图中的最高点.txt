994. 腐烂的橘子
class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        // 使用腐烂橘子 初始化队列
        queue<pair<int, int>> fresh;
        queue<pair<int, int>> que;
        for (int i = 0; i < grid.size(); ++i) {
            for (int j = 0; j < grid[0].size(); ++j) {
                if (grid[i][j] == 2) { // 烂橘橘子的坐标 入队
                    que.push( {i, j} );
                }
                if (grid[i][j] == 1) { // 记录新鲜橘子
                    fresh.push( {i, j} );
                }
            }
        }
        // 当队列为空(没有烂橘子)时：存在新鲜橘子那就永远不能感染(返回-1)  不存在新鲜橘子时就返回0 
        if (que.empty()) {
            return fresh.empty() ? 0 : -1; 
        }
        // BFS
        int minute = -1;
        while (!que.empty()) {
            int size = que.size();
            for (int i = 0; i < size; ++i) {
                pair<int, int> currPos = que.front();
                que.pop();
                // 基于当前位置 计算下一个位置
                for (int idx = 0; idx < dx.size(); ++idx) {
                    int nextX = currPos.first + dx[idx];
                    int nextY = currPos.second + dy[idx];
                    // 校验下一个位置的坐标
                    if (nextX < 0 || nextX >= grid.size() || nextY < 0 || nextY >= grid[0].size()) {
                        continue;
                    }
                    // 下一个位置是烂橘子(已感染的橘子)和空格  已经处理过了
                    if (grid[nextX][nextY] != 1) {
                        continue;
                    }
                    // 下一个位置是未被感染的正常橘子 现在开始感染
                    grid[nextX][nextY] = 2;
                    // 下一个位置入队
                    que.push( {nextX, nextY} );
                }
            }
            ++minute;
        }

        // 经过BFS感染之后, 如果还存在新鲜橘子 则返回-1
        for (int i = 0; i < grid.size(); ++i) {
            for (int j = 0; j < grid[0].size(); ++j) {
                if (grid[i][j] == 1) {
                    return -1;
                }
            }
        }
        // 返回最小分钟
        return minute;
    }

private:
    // 上下左右 四个方向
    vector<int> dx {-1, 1, 0, 0};
    vector<int> dy {0, 0, -1, 1};
};



1162. 地图分析
//  这一题的本质是‘leetcode 994腐烂的橘子’    陆地就是初始的烂橘子  什么时候可以把所有的海洋都感染成陆地?
class Solution {
public:
    int maxDistance(vector<vector<int>>& grid) {
        // 把所有的陆地放入队列
        queue<pair<int, int>> q;
        for (int i = 0; i < grid.size(); ++i) {
            for (int j = 0; j < grid[0].size(); ++j) {
                if (grid[i][j] == 1) {
                    q.push( {i, j} );
                }
            }
        }

        if (q.empty() || q.size() == grid.size()*grid[0].size()) {
            return -1;
        }
        // BFS 以陆地为基础 一圈一圈的向外扩展
        int level = -1;
        while (!q.empty()) {
            // 外圈的每一圈
            for (int k = q.size(); k > 0; --k) {
                pair<int, int> p = q.front();
                q.pop();
                // 上下左右 四个方向
                for (int i = 0; i < dirC.size(); ++i) {
                    // 下一个坐标
                    int r = p.first + dirR[i];
                    int c = p.second + dirC[i];
                    // 校验下一个坐标的有效性
                    if (r < 0 || r >= grid.size() || c < 0 || c >= grid[0].size()) {
                        continue;
                    }
                    // 下一个位置是陆地(已经遍历过了)
                    if (grid[r][c] == 1) {
                        continue;
                    }
                    // 下一个位置是海洋 改成陆地并放入队列中
                    grid[r][c] = 1;
                    q.push( {r, c} );
                }
            }
            level++;
        }
        return level;
    }

private:
    vector<int> dirR = {-1, 1, 0, 0};
    vector<int> dirC = {0, 0, -1, 1};
};




1765. 地图中的最高点
class Solution {
private:
    // 上下左右
    int dx[4] = {-1, 0, 1,  0};
    int dy[4] = { 0, 1, 0, -1};

public:
    vector<vector<int>> highestPeak(vector<vector<int>>& a) {
        int row = a.size();
        int col = a[0].size();
        vector<vector<int>> ans(row, vector<int>(col, -1)); // 单元格高度
        queue<pair<int, int>> q; // 初始化水的坐标(x, y)
        for(int i = 0; i < row; ++i){
            for(int j = 0; j < col; ++j){
                if (a[i][j] == 1) { // 该单元格是水
                    ans[i][j] = 0;  // 高度是0
                    q.push( {i, j} ); // 队列的起点
                }
            }
        }
        int high = 0;
        while(!q.empty()){
            high++;
            // 处理一层
            for(int k = q.size(); k > 0; --k){
                auto [x, y] = q.front();
                q.pop();
                // 向上下左右扩散
                for (int i = 0; i < 4; ++i) {
                    int nextX = x + dx[i];
                    int nextY = y + dy[i];
                    // 检查下一个位置的坐标
                    if (nextX < 0 || nextX >= row || nextY < 0 || nextY >= col) {
                        continue;
                    }
                    // 已经处理过了
                    if (ans[nextX][nextY] != -1) {
                        continue;
                    }
                    // 设置下一个单元格的高度
                    ans[nextX][nextY] = high;
                    q.push( {nextX, nextY} );
                }
            }
        }
        return ans;
    }
};


