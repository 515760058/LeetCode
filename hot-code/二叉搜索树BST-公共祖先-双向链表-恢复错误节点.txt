剑指 Offer 68 - I. 二叉搜索树的最近公共祖先
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if (root == nullptr) {
            return nullptr;
        }
        // p,q都小于root，都在root的左子树上
        if (p->val < root->val && q->val < root->val) {
            return lowestCommonAncestor(root->left, p, q);
        }
        // p,q都大于root，都在root的右子树上
        if (p->val > root->val && q->val > root->val) {
            return lowestCommonAncestor(root->right, p, q);
        }
        // p,q等于root  或者 一个大于root一个小于root  此时root就是公共祖先
        return root;
    }
};





剑指 Offer 36. 二叉搜索树与双向链表
class Solution {
public:
    Node* treeToDoublyList(Node* root) {
        if (root == nullptr) {
            return NULL;
        }   
        Node* head = nullptr; // head保存头结点
        Node* pre = nullptr;  // pre保存中序遍历过程中的上一个节点
        inOrder(root, head, pre);
        head->left = pre;     //最后pre指向最后一个节点
        pre->right = head;
        return head;
    }
    void inOrder(Node* root, Node*& head, Node*& pre) { // 注意是指针的引用
        if(root == NULL) {
            return;
        }

        inOrder(root->left, head, pre);
        if (pre == nullptr) { //说明当前是第一个节点，作为头结点 
            head = root;
        } else {
            root->left  = pre;
            pre->right = root;
        }
        pre = root;
        inOrder(root->right, head, pre);
    }
};




99. 恢复二叉搜索树
给你二叉搜索树的根节点 root ，该树中的两个节点被错误地交换。请在不改变其结构的情况下，恢复这棵树。
/*
我们对错误的二叉树进行 中序遍历 那我们按顺序访问到的数应该是按顺序排列的 
那如果对两个节点交换了顺序  那一定有两个地方是  不满足  前一个元素 < 当前元素 < 后一个元素
 如示例2      3  1  4   2：
              3  这个节点不满足      1 这个节点不满足
             所以我们使用两个全局变量在遍历过程中记录这两个节点 最后对他们进行交换
 */
class Solution {
public:
    void recoverTree(TreeNode* root) {
        TreeNode* t1 = nullptr;
        TreeNode* t2 = nullptr;
        TreeNode* pre = nullptr;
        // 中序
        inorder(root, t1, t2, pre);
        swap(t1->val, t2->val); // 交换
    }

private:
    void inorder(TreeNode* root, TreeNode*& t1, TreeNode*& t2, TreeNode*& pre){
        if (root == nullptr) {
            return;
        }
        inorder(root->left, t1, t2, pre);
        // 发现pre大于当前元素  不满足条件
        if (pre != nullptr && pre->val > root->val) { 
            if (t1 == nullptr) { // 第一个错误位置t1是pre
                t1 = pre;
            }
            t2 = root; // 第二个错误位置t2是第二次的当前节点
        }
        pre = root; // 更新pre
        inorder(root->right, t1, t2, pre);
    }
};
