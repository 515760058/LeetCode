392. 判断子序列
给定字符串 s 和 t ，判断 s 是否为 t 的子序列。
class Solution {
public:
    bool isSubsequence(string s, string t) {
        int i = 0; // 对应t的下标
        int j = 0; // 对应s的下标
        while (i < t.size()){
            if (j == s.size()) {
                return true;
            } else if (t[i] == s[j]) { // 字母相同
                i++;
                j++;
            } else{
                i++;
            }   
        }
        return j == s.size();
    }
};


5. 最长回文子串
给你一个字符串 s，找到 s 中最长的回文子串。
class Solution {
public:
    string longestPalindrome(string s) {
        string res;
        for (int i = 0; i < s.size(); ++i) {
            string s1 = getPalindrome(s, i, i);   // 回文串的长度是奇数 有一个字符是中心
            string s2 = getPalindrome(s, i, i+1); // 回文串的长度是偶数 没有中心字符
            if (s1.size() > res.size()) { res = s1; }
            if (s2.size() > res.size()) { res = s2; }
        }
        return res;
    }

private:
    // 以s[l]和s[r]为中心，向两侧扩展 寻找回文子串
    string getPalindrome(string& s, int l, int r) {
        while (l >= 0 && r < s.size() && s[l] == s[r]) {
            // 向两边扩展
            l--;
            r++;
        }
        // 返回以s[l]和s[r]为中心的回文子串
        return s.substr(l+1, r-l-1);
    }
};


131. 分割回文串
给你一个字符串 s，请你将 s 分割成一些子串，使每个子串都是 回文串 。返回 s 所有可能的分割方案。
输入：s = "aab"    输出：[["a","a","b"],["aa","b"]]
class Solution {
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>> res;
        vector<string> tmp;
        backTrace(s, 0, tmp, res);
        return res;
    }

private:
    void backTrace(string& s, int start, vector<string>& tmp, vector<vector<string>>& res) {
        if (start == s.size()) {
            res.push_back(tmp);
            return;
        }
        // 尝试遍历每一个子串
        for (int i = start; i < s.length(); i++) {
            string s1 = s.substr(start, i-start+1); // [start, i-start+1)子串
            if (!isPalindrome(s1)) {     // 子串必须是回文串
                continue;
            }
            tmp.push_back(s1);           // 选择
            backTrace(s, i+1, tmp, res); // 向下递归
            tmp.pop_back();              // 撤销
        }
    }

    // 判断s是否是回文串
    bool isPalindrome(string& s) {
        if (s.size() <= 1) {
            return true;
        }
        int left = 0;
        int right = s.size() - 1;
        while (left < right) {
            if (s[left] != s[right]) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
};

