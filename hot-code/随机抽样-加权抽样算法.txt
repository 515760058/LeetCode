382. 链表随机节点
给定一个单链表，随机选择链表的一个节点，并返回相应的节点值。保证每个节点被选的概率一样。
class Solution {
private:
    ListNode* head; // 保存链表的头节点
public:
    // 构造函数
    Solution(ListNode* _head) : head(_head) { }
    // 随机返回链表中的一个元素，并且每个元素被返回的概率相等 都是1/n
    int getRandom() {
        //vector<int> tmp = getRandomK(1);
        //return tmp[0];

        int res = 0;
        int cnt = 0;
        ListNode* node = head; 
        while (node != nullptr) {
            ++cnt;
            if (rand() % cnt == 0) { // 取值范围[0, cnt-1],  所以1/cnt的概率出现0 表示选中该节点的值
                res = node->val;
            }
            node = node->next;
        }
        return res;
    }

private:
    //拓展：随机选择k个元素   第i个元素 以k/i的概率选择
    vector<int> getRandomK(int k) {
        vector<int> res(k);
        // 先默认选择前k个元素
        ListNode* node = head;
        for (int i = 0; i < k && node != nullptr; ++i) {
            res[i] = node->val;
            node = node->next;
        }
        // 随机
        int i = k;
        while (node != nullptr) {
            int randNum = rand() % (++i);
            if (randNum < k) {
                res[randNum] = node->val;
            }
            node = node->next;
        }
        return res;
    }
};





398. 随机数索引
给定一个可能含有重复元素的整数数组，要求随机输出给定的数字的索引。 您可以假设给定的数字一定存在于数组中。
class Solution {
private:
    vector<int> nums;
public:
    Solution(vector<int>& _nums) : nums(_nums) {}
    
    int pick(int target) {
        int count = 0;
        int res = 0;
        for (int i = 0; i < nums.size(); ++i){
            // 第n个target元素，会有1/n的概率被选中
            if (nums[i] == target){ // 在目标target中选取
                ++count;
                if (rand() % count == 0) { // 取值范围[0, count-1]  以1/n的概率选择该数
                    res = i;
                }
            }
        }
        return res;
    }
};





528. 按权重随机选择
给定一个正整数数组 w ，其中 w[i] 代表下标 i 的权重（下标从 0 开始），请写一个函数 pickIndex ，它可以随机地获取下标 i，选取下标 i 的概率与 w[i] 成正比。
/*
随机函数rand()生成所有数的概率是相等的 rand()%n + 1 可以生成 1~n 的所有数
现在把原来的数组w做一个变换，每个值是前面所有值的累加 (前缀和)
比如[4,2,3]变成[4,6,9]  可以把这个数组看成从数轴上从1开始的很多段[1 2 3 4], [5 6], [7 8 9] 这些段里的每个数字生成概率是相等的，那么生成某个段内数字的概率就是段的长度与总长度的比值
于是，只需要随机生成一个数，然后使用二分查找这个数字落在哪个段
*/
class Solution {
private:
    vector<int> prefixSum;
public:
    // 构造函数  计算前缀和
    Solution(vector<int>& w) {
        prefixSum.resize(w.size());
        prefixSum[0] = w[0];
        for (int i = 1; i < w.size(); ++i) {
            prefixSum[i] = prefixSum[i-1] + w[i];
        }
    }
    
    // 随机生成一个数字  查找该数字落在哪个段
    int pickIndex() {
        int num = rand() % prefixSum.back() + 1;
        int idx = lower_bound(prefixSum.begin(), prefixSum.end(), num) - prefixSum.begin();
        return idx;
    }
};


