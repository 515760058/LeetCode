72. 编辑距离
class Solution {
public:
    int minDistance(string word1, string word2) {
        int len1 = word1.size();
        int len2 = word2.size();
        // dp数组及其初始值  dp[i][j]表示word1[0, i]和word2[0, j]的编辑距离
        vector<vector<int>> dp(len1+1, vector<int>(len2+1, 0));
        for(int i = 1; i <= len1; ++i){//第一列初值
            dp[i][0] = i;
        }
        for(int j = 1; j <= len2; ++j){//第一行初值
            dp[0][j] = j;
        }
        // 开始dp
        for(int i = 1; i <= len1; ++i){
            for(int j = 1; j <= len2; ++j){
                if(word1[i-1] == word2[j-1]){
                    // 字母相等 不用(编辑)操作  因此直接用左上方的数来赋值
                    dp[i][j] = dp[i-1][j-1];
                }else{
                    // 字母不相等  需要编辑操作一次
                    //         1 + min(左上方(替换)，   上方(删除/插入)， 左方(删除/插入));
                    dp[i][j] = 1 + min(dp[i-1][j-1] , min(dp[i-1][j], dp[i][j-1]));
                }
            }
        }
        return dp[len1][len2];
    }
};




