
剑指 Offer 14- I. 剪绳子
class Solution {
public:
    int cuttingRope(int n) {
        if (n < 4) {
            return n - 1;
        }
        long res = 1;
        while (n > 4) {
            res = res * 3;
            n -= 3;
        }
        return res * n;
    }
};


剑指 Offer 14- II. 剪绳子 II
/*
核心思路是：尽可能把绳子分成长度为3的小段，这样乘积最大
步骤如下：
    (1)如果 n == 2，返回1，如果 n == 3，返回2，两个可以合并成n小于4的时候返回n - 1
    (2)如果 n == 4，返回4
    (3)如果 n > 4，分成尽可能多的长度为3的小段，每次循环长度n减去3，乘积res乘以3；最后返回时乘以小于等于4的最后一小段；每次乘法操作后记得取余就行
    以上2和3可以合并
*/
class Solution {
private:
    static const int MOD = 1000000007;
public:
    int cuttingRope(int n) {
        if (n < 4) {
            return n - 1;
        }
        long res = 1;
        while (n > 4) {
            res = res * 3 % MOD;
            n -= 3;
        }
        return res * n % MOD;
    }
};



剑指 Offer 29. 顺时针打印矩阵
class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int> res;
        if (matrix.empty()) {
            return res;
        }
        int top = 0; 
        int left = 0;
        int bottom = matrix.size() - 1;
        int right = matrix[0].size() -1;
        while (top <= bottom || left <= right) {
            // 上面的一行top 从左向右
            for (int i = left; i <= right; ++i) {
                res.push_back(matrix[top][i]);
            }
            if (++top > bottom) { break; }
            // 右边的一行right 从上到下
            for (int i = top; i <= bottom; ++i) {
                res.push_back(matrix[i][right]);
            }
            if (--right < left) { break; }
            // 下面的一行bottom  从右向左
            for (int i = right; i >= left; --i) {
                res.push_back(matrix[bottom][i]);
            }
            if (--bottom < top) { break; }
            // 左边的一行left 从下到上
            for (int i = bottom; i >= top; --i) {
                res.push_back(matrix[i][left]);
            }
            if (++left > right) { break; }
        }
        return res;
    }
};



剑指 Offer 40. 最小的k个数
class Solution {
public:
    vector<int> getLeastNumbers(vector<int>& arr, int k) {
        if (k == 0) {
            return {};
        }
        multiset<int> s; // 模拟一个堆
        for (int n : arr) {
            if (s.size() < k) {
                s.insert(n);
            } else {
                int big = *s.rbegin(); // 堆中最大的数字
                // 更新
                if (big > n) {
                    s.erase(s.find(big));
                    s.insert(n);
                }
            }
        }
        vector<int> res(s.begin(), s.end());
        return res;
    }
};



剑指 Offer 41. 数据流中的中位数
class MedianFinder {
private:
    priority_queue<int, vector<int>, less<int>> maxHeap;    // 最大堆，存储左边一半小的数据，堆顶为最大值
    priority_queue<int, vector<int>, greater<int>> minHeap; // 最小堆，存储右边一半大的数据，堆顶为最小值

public:
    MedianFinder() {}

    // 维持堆数据平衡，并保证左边堆的最大值小于或等于右边堆的最小值
    void addNum(int num) {
        // 当两堆的数据个数相等时候，左边堆添加元素 采用的方法是先把数据插入右边堆，然后将右堆顶的数据插入到左边堆，这样保证左边堆插入的元素始终是右边堆的最小值
        // 同理左边数据多，往右边堆添加数据的时候，先将数据放入左边堆，选出然后把左堆的最大值放到右边堆中
        if (maxHeap.size() == minHeap.size()) {
            minHeap.push(num);
            int top = minHeap.top(); minHeap.pop();
            maxHeap.push(top);
        } else {
            maxHeap.push(num);
            int top = maxHeap.top(); maxHeap.pop();
            minHeap.push(top);
        }
    }
    
    double findMedian() {
        if (maxHeap.size() == minHeap.size()) {
            return (maxHeap.top() + minHeap.top()) * 1.0 / 2;
        } else {
            return maxHeap.top() * 1.0;
        }
    }
};




剑指 Offer 44. 数字序列中某一位的数字
/* 数字范围    数量num  位数    占多少位
    1-9        9        1       9
    10-99      90       2       180
    100-999    900      3       2700
    1000-9999  9000     4       36000  ...
    例如 2901 = 9 + 180 + 2700 + 12 即一定是4位数,第12位   n = 12;
    数据为 1000 + 12/4 -1  = 1000 + 2 = 1002   如果有余数则是1003
    根据余数 定位1002或1003中的位置
*/
// 按照数的位数模拟计算就好了
class Solution {
public:
    int findNthDigit(int n) {
        if (n == 0) {
            return 0;
        }
        long wei = 1;
        long num = 9;
        while (n > wei * num) {
            n = n - wei * num;
            wei++;
            num *= 10;
        }
        //cout << n << ", wei=" << wei << endl; // 以2901举例  此时n=12  wei=4
        int shang = n / wei; // 商是3 表示在第三个四位数中1000  1001  【1002】  1003
        int shu = (int)pow(10, wei-1) + shang - 1; // 1002
        //cout << shu << endl;
        int yu = n % wei; // 余数是0  表示答案正好在1002的最后一位  否则就在1003中
        if(yu == 0) { // 余数为0  恰好就是这个数的最后一位
            return shu % 10;
        }
        // 余数不为0  则是下一个数的yu-1位
        shu++;
        string str = to_string(shu);
        return str[yu-1]-'0';
    }
};





剑指 Offer 51. 数组中的逆序对
class Solution {
public:
    int reversePairs(vector<int>& nums) {
        int n = nums.size();
        if (n < 2) {
            return 0;
        } 
        vector<int> temp(nums);
        return mergeSort(nums, temp, 0, n-1);
    }

private:
    int mergeSort(vector<int> &nums, vector<int> &temp, int l, int r) {
        if(l >= r) {
            return 0;
        }
        int mid = l + (r - l)/ 2;
        // res = nums[l...mid] 范围的逆序数 + nums[mid+1...r] 范围的逆序数 + 跨越两个子区间的逆序对数
        int res =  mergeSort(nums, temp, l, mid)
                 + mergeSort(nums, temp, mid+1, r)
                 + merge(nums, temp, l, mid, r);
        return res;
    }

    // merge函数求出在nums[l...mid]和nums[mid+1...r]有序的基础上, nums[l...r]的逆序数对个数
    int merge(vector<int> &nums, vector<int> &temp, int l, int mid, int r) {
        int cnt = 0;    //逆序对个数
        int i = l;      // i是左半部分的索引，初始值为L
        int j = mid + 1; // j右半部分的索引，初始值为R
        int pos = l;    // 待归并数组的起始位置 = L
        while(i <= mid && j <= r) { //左右两个子区间都还没遍历完
            if(nums[i] <= nums[j]) { //这儿必须得是“<=”，如是“<”，则归并排序是不稳定的
                temp[pos++] = nums[i++];
            } else {                      // 此时, 左边的nums[i] > 右边的nums[j]
                temp[pos++] = nums[j++];
                // nums[j]和左半部分的所有未处理的元素（nums[i]及其后面的所有元素）都构成了逆序数对   左半部分此时未处理的元素个数为 mid-j+1
                cnt += (mid - i + 1);
            }
        }
        while(i <= mid) {  // 如果左半部分元素有剩余
            temp[pos++] = nums[i++];
        }
        while(j <= r) {    // 如果右半部分元素有剩余
            temp[pos++] = nums[j++];
        }
        //这道题的思路是边排序边统计逆序数的对数，排序要用到辅助数组temp，排完序再赋值回nums
        while(l <= r) {
            nums[l] = temp[l];
            l++;
        }
        return cnt;     
    }
};



剑指 Offer 45. 把数组排成最小的数
输入一个非负整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。
class Solution {
public:
    string minNumber(vector<int>& nums) {
        // 把每个数字转成字符串
        vector<string> strs(nums.size());
        for (int i = 0; i < nums.size(); ++i) {
            strs[i] = to_string(nums[i]);
        }
        // 对字符串排序
        sort(strs.begin(), strs.end(),
             [](string& a, string& b){
                 return a+b < b+a;
            });
        // 转成结果
        string res;
        for (string& str : strs) {
            res += str;
        }
        return res;
    }
};


剑指 Offer 57 - II. 和为s的连续正数序列
输入一个正整数 target ，输出所有和为 target 的连续正整数序列（至少含有两个数）。
序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。
class Solution {
public:
    // 双指针 滑动窗口
    vector<vector<int>> findContinuousSequence(int target) {
        int left = 1;
        int right = 1;
        int sum = 0;
        vector<vector<int>> res;
        for (int right = 0; right < target; ++right) {
            sum += right;
            while (sum > target) {
                sum -= left;
                ++left;
            }
            // 保存结果
            if (sum == target) {
                vector<int> tmp;
                for (int i = left; i <= right; ++i) {
                    tmp.push_back(i);
                }
                res.push_back(tmp);
            }
        }
        return res;
    }
};



剑指 Offer 46. 把数字翻译成字符串
给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。
请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。
class Solution {
public:
    int translateNum(int num) {
        int res = 0;
        string numStr = to_string(num);
        translateNum(numStr, 0, res);
        return res;
    }
private:
    // 递归 回溯？
    void translateNum(string& num, int start, int& res) {
        if (start == num.size()){//结束条件
            res++;
            return;
        }
        // 分支1  一位数字时
        translateNum(num, start+1, res); 
        // 分支2  两位数字时
        string str = num.substr(start, 2);
        int n = stoi(str);
        if (10 <= n && n <= 25) { //剪枝操作
            translateNum(num, start+2, res);
        }
    }
};




剑指 Offer 58 - I. 翻转单词顺序
输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。为简单起见，标点符号和普通字母一样处理。例如输入字符串"I am a student. "，则输出"student. a am I"。
class Solution {
public:
    string reverseWords(string s) {
        // 流和栈
        string tmp;
        stack<string> stk;
        stringstream ss(s);
        while (ss >> tmp) {
            stk.push(tmp);
        }
        tmp = "";
        while (!stk.empty()) {
            tmp += (stk.top() + " ");
            stk.pop();
        }
        tmp.pop_back(); // 弹出最后的空格
        return tmp;
    }
};





剑指 Offer 49. 丑数
我们把只包含质因子 2、3 和 5 的数称作丑数（Ugly Number）。求按从小到大的顺序的第 n 个丑数。
class Solution {
public:
    int nthUglyNumber(int n) {
        int res = 1;
        vector<int> nums(n, 1); // 保存n个丑数 其中第一个丑数是1
        int idx2 = 0;
        int idx3 = 0; 
        int idx5 = 0;
        for (int i = 1; i < n; ++i) {
            // 根据以前的丑数 计算下一个丑数
            int res = min(nums[idx2]*2, min(nums[idx3]*3, nums[idx5]*5));
            nums[i] = res; // 保存丑数
            if (res == nums[idx2]*2) { idx2++; }
            if (res == nums[idx3]*3) { idx3++; }
            if (res == nums[idx5]*5) { idx5++; }
        }
        return nums[n-1];
    }
};


剑指 Offer 53 - II. 0～n-1中缺失的数字
一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。
class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int res = nums.size();
        for (int i = 0; i < nums.size(); ++i) {
            res ^= nums[i];
            res ^= i;
        }
        return res;
    }
};
// 有序 使用二分法也可以







剑指 Offer 65. 不用加减乘除做加法
// 两个整数做异或运算，得到不进位加法的运算结果
// 两个整数做与运算，然后左移一位，得到进位的运算结果
// 将上面得到的两个结果相加，即重复上述步骤直到进位的结果为0
class Solution {
public:
    int add(int a, int b) {
        while (b) {
            int carry = (unsigned int)(a & b) << 1;    // 与运算然后左移一位 得到a+b的进位
            a ^= b; // 异或运算，得到a+b 不老考虑进位时的运算结果
            b = carry;
        }
        return a;
    }
};




剑指 Offer 66. 构建乘积数组
class Solution {
public:
    vector<int> constructArr(vector<int>& a) {
        int len = a.size();
        vector<int> b(len, 1);
        int product = 1;
        for (int i = 0; i < len; ++i) { // 从左往右累乘
            b[i] *= product;
            product *= a[i];
        }
        product = 1;
        for (int i = len-1; i >= 0; --i) { // 从右向左累乘
            b[i] *= product;
            product *= a[i];
        }
        return b;
    }
};






剑指 Offer 62. 圆圈中最后剩下的数字
// 链接：https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/solution/javajie-jue-yue-se-fu-huan-wen-ti-gao-su-ni-wei-sh/
/*
最后剩下的 3 的下标是0
第四轮反推，补上m个位置，然后模上当时的数组大小2，位置是(0 + 3) % 2 = 1。
第三轮反推，补上m个位置，然后模上当时的数组大小3，位置是(1 + 3) % 3 = 1。
第二轮反推，补上m个位置，然后模上当时的数组大小4，位置是(1 + 3) % 4 = 0。
第一轮反推，补上m个位置，然后模上当时的数组大小5，位置是(0 + 3) % 5 = 3。
所以最终剩下的数字的下标就是3。因为数组是从0开始的，所以最终的答案就是3。
    总结一下反推的过程，就是 (当前index + m) % 上一轮剩余数字的个数。
*/
class Solution {
public:
    int lastRemaining(int n, int m) {
        int ans = 0; // 最后剩下的那个人 肯定是在下标0处
        // 最后一轮剩下2个人  所以从2开始反推
        for (int i = 2; i <= n; i++) {
            ans = (ans + m) % i; // 计算这个人在上一轮的位置(下标)
        }
        return ans;
    }
};





剑指 Offer 61. 扑克牌中的顺子
从扑克牌中随机抽5张牌，判断是不是一个顺子，即这5张牌是不是连续的。2～10为数字本身，A为1，J为11，Q为12，K为13，而大、小王为 0 ，可以看成任意数字。A 不能视为 14。
class Solution {
public:
    bool isStraight(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int zeroCnt = 0; // 万能牌的数量
        int diff = 0; // 缺了多少张牌
        for (int i = 0; i < nums.size(); ++i) {
            if (nums[i] == 0) { // 0是万能牌
                zeroCnt++;
            } else {
                if (i+1 < nums.size()) { // 下一张牌的下标 是有效的
                    if (nums[i] == nums[i+1]) { // 当前牌==下一张牌   出现了对子 那肯定不是顺子
                        return false;
                    }
                    diff += nums[i+1] - nums[i] - 1; // 当前牌和下一张牌 差了多少张牌
                }
            }
        }
        return zeroCnt >= diff; // 万能牌 能否补齐缺的牌？
    }
};


