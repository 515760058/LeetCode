// 416. 分割等和子集
// 0-1背包问题的衍生
class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int sum = accumulate(nums.begin(), nums.end(), 0);
        if (sum & 0x1) { // 和是奇数 不可能的
            return false;
        }
        sum /= 2; // 表示背包的容量
        int N = nums.size(); // 表示可选择的物品数量
        // dp[n][sum]表示 只使用前n个物品 恰好装满容量sum，是否可以？
        vector<vector<bool>> dp(N+1, vector<bool>(sum+1, false));
        // 初始情况
        for (int i = 0; i <= N; ++i) {
            dp[i][0] = true; // 背包容量为0时，物品全都不选。是成立的。
        }
        // 开始dp
        for (int i = 1; i <= N; ++i) { // 只使用前i个物品
            for (int w = 1; w <= sum; ++w) { // 当前的背包容量w
                if (w < nums[i-1]) { // 当前的背包容量仅有w 不能装下物品i-1
                    dp[i][w] = dp[i-1][w];
                } else { // 当前的背包容量w  可以装下物品i-1
                         //    不装物品i-1 ||  装物品i-1(要给物品i-1预留出容量)
                    dp[i][w] = dp[i-1][w] || dp[i-1][w-nums[i-1]];
                }
            }
        }
        return dp[N][sum];
    }
};



474. 一和零
给你一个二进制字符串数组 strs 和两个整数 m 和 n 。
请你找出并返回 strs 的最大子集的大小，该子集中 最多 有 m 个 0 和 n 个 1 。

输入：strs = ["10", "0001", "111001", "1", "0"], m = 5, n = 3     输出：4
解释：最多有 5 个 0 和 3 个 1 的最大子集是 {"10","0001","1","0"} ，因此答案是 4 。
其他满足题意但较小的子集包括 {"0001","1"} 和 {"10","1","0"} 。{"111001"} 不满足题意，因为它含 4 个 1 ，大于 n 的值 3 。

输入：strs = ["10", "0", "1"], m = 1, n = 1     输出：2
解释：最大的子集是 {"0", "1"} ，所以答案是 2

// 和0-1背包的思路差不多，也就是选与不选的问题。
class Solution {
public:
    int findMaxForm(vector<string>& strs, int m, int n) {
        // dp[m][n] 表示 有m个0和n个1 的最大子集数量
        vector<vector<int>> dp(m+1, vector<int>(n+1, 0));
        for (string& str : strs) { // 截止到str为止的数组，最多有多少个
            // 统计str中 0和1个数
            int t0 = 0;
            int t1 = 0;
            for (char c : str) {
                if(c == '0') { t0++; }
                else { t1++; }
            }
            // 对每个新字符串str  都要更新一遍dp数组 
            //  遍历背包容量且从后向前遍历   计算m,n不同情况下的解
            for (int i = m; i >= 0; i--) {
                for (int j = n; j >= 0; j--) {
                    // 当前拥有的ij数量 足够选择这个字符串
                    if (i >= t0 && j >= t1) {
                                    // 选择str           不选str
                        dp[i][j] = max(dp[i-t0][j-t1]+1, dp[i][j]);
                    }
                }
            }
        }
        return dp[m][n];
    }
};
