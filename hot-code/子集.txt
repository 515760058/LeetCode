78. 子集
// 给你一个整数数组 nums ，数组中的元素互不相同。返回该数组所有可能的子集
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> res;
        vector<int> temp;
        for(int i = 0; i <= nums.size(); ++i){
            //有i个元素的子集 保存在res中
            helper(0, i, temp, nums, res);
        }
        return res;
    }

private:
    //从nums中寻找 “有k个元素的子集”，保存到res中
    //idx: nums数组中的起始下标     k：目标子集的元素数量   temp:临时集合
    void helper(int idx, int k, vector<int>& temp, vector<int>& nums, vector<vector<int>>& res){
        if(temp.size() == k){ //k个元素
            res.push_back(temp);
            return;
        }
        for(int i = idx; i < nums.size(); ++i){
            temp.push_back(nums[i]);         //选择该元素
            helper(i+1, k, temp, nums, res); //下一层
            temp.pop_back();                 //撤销选择
        }
    }
};




90. 子集 II
// 给定一个可能包含重复元素的整数数组 nums，返回该数组所有可能的子集
class Solution {
public:
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        sort(nums.begin(), nums.end());//排序，保证相同子集的顺序一致，可以利用set去重
        //回溯
        set<vector<int>> res; //set去重
        vector<int> temp;
        for(int i = 0; i <= nums.size(); ++i) {
            //从nums中选择i个元素的子集 保存在res中
            helper(0, i, temp, nums, res);
        }
        vector<vector<int>> finalRes(res.begin(), res.end());//set转换vector
        return finalRes;
    }

private:
    //从nums中寻找 “有k个元素的子集”，保存到res中
    //idx: nums数组中的起始下标     k：目标子集的元素数量   temp:临时集合
    void helper(int idx, int k, vector<int>& temp, vector<int>& nums, set<vector<int>>& res){
        if(temp.size() == k){ //到了k个元素
            res.insert(temp);
            return;
        }
        for(int i = idx; i < nums.size(); ++i){
            temp.push_back(nums[i]);         //选择该元素
            helper(i+1, k, temp, nums, res); //下一层
            temp.pop_back();                 //撤销选择
        }
    }
};




