备忘录模式简介
https://blog.csdn.net/sinat_21107433/article/details/102907007
在软件系统的操作过程中，难免会出现一些不当的操作，使得系统状态出现某些故障。
如果能够有一种机制——能够保存系统每个阶段的状态，当用户操作失误的时候，可以撤销不当的操作，回到历史某个阶段——那么软件系统将更加灵活和人性化。

有没有这样的一种解决方案呢？有！那就是备忘录模式。
备忘录模式提供了一种状态恢复的机制，用户可以方便地回到指定的某个历史状态。很多软件的撤销操作，就使用了备忘录模式。

备忘录模式：在不破坏封装的前提下捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。 


备忘录模式主要有以下角色：
    Originator（原发器）：通过创建一个备忘录类存储当前的内部状态，也可以使用备忘录来恢复其内部状态，通常是将系统中需要保存内部状态的类设计为原发器；
    Memento（备忘录）：用于存储原发器的内部状态。备忘录的设计可以参考原发器的设计，根据需要确定备忘录类中的属性；
            除了原发器类对象，不允许其他对象修改备忘录。
    Caretaker（负责人）：负责保存备忘录，可以存储一个或多个备忘录对象，但是负责人只负责保存对象，不能修改对象，也不必知道对象的实现细节。
          （看好了，负责人可以存储多个备忘录对象，想一想这有什么用？是不是可以保存多个历史状态？实现多步撤销操作了）


备忘录模式的关键是【备忘录类】和【负责人类】的设计，以下是上述三个角色的典型实现：
#include <iostream>
#include <string>
using namespace std;

// 要保存的数据
struct Data {
    Data(string _str="", int _num=0) : str(_str), num(_num) {}
    string str;
    int num;
};

// 前向声明
class Originator;

// 备忘录  典型实现（仿照原生器的设计）
class Memento {
public:
    Memento() {}
    Memento(Originator* o){
        state = o->getState();
    }
    void setState(Data _state){ state = _state; }
    Data getState(){ return state; }
private:
    Data state;
};

// 原发器  典型实现
class Originator {
public:
    Originator() {}
    Originator(Data _state) : state(_state) {}
    // 创建备忘录对象
    Memento* createMemento(){
        return new Memento(this); // 根据当前状态，创建一个备忘录
    }
    // 利用备忘录对象恢复原发器状态
    void restoreMemento(Memento* m){
        state = m->getState();
    }
    void setState(Data _state) { state = _state; }
    Data getState() { return state; }
private:
    Data state;
};

// 负责人  典型实现
class Caretaker {
public:
    Caretaker(){}
    Memento* getMemento(){ return memento; }
    void setMemento(Memento* m) { memento = m; }
private:
    Memento* memento;
};

// 客户端代码示例
int main() {
    // 创建原发器对象
    Originator* originator = new Originator( Data("状态1", 1) );
    // 创建负责人对象 保存一个状态
    Caretaker* caretaker = new Caretaker();
    caretaker->setMemento( originator->createMemento() );
   // 修改成新的状态
    originator->setState( Data("状态2", 2));
    // 从负责人对象中取出备忘录对象，实现撤销
    originator->restoreMemento( caretaker->getMemento() );

    return 0;
}


4.总结
优点：
	实现状态恢复、撤销操作的功能，用户可以恢复到指定的历史状态，让软件系统更加人性化；
	备忘录封装了信息，除了原生器以外，其他对象访问不了备忘录的代码；
缺点：
	资源消耗大。如果需要保存原生器对象的多个历史状态，那么将创建多个备忘录对象；或者如果原生器对象的很多状态都需要保存，也将消耗大量存储资源。
适用环境：
	保存一个对象的历史状态，系统需要设计回退或者撤销功能；
	备忘录类可以封装一个对象的历史状态，避免对象的历史状态被外界修改。

