适配器模式
https://blog.csdn.net/sinat_21107433/article/details/102656617
在软件系统设计中，当需要组合使用的类不兼容时，也需要类似于变压器一样的适配器来协调这些不兼容者，这就是适配器模式！
那么什么是适配器模式呢？
适配器模式：将一个类的接口转换成客户希望的另一个接口。适配器模式让那些接口不兼容的类可以一起工作。

适配器模式分为类适配器和对象适配器
    适配器类（Adapter）：适配器与适配者之间是继承或实现关系；
    适配者类（Adaptee）：适配器与适配者之间是关联关系。
    目标抽象类（Target）：定义客户所需要的接口。

(1)类适配器中，适配器类通过继承适配者类，并重新实现适配者的具体接口来达到适配客户所需要的接口的目的。
(2)对象适配器中，适配器类通过在类中实例化一个适配者类的对象，并将其封装在客户所需功能的接口里，达到最终的适配目的。


举个使用对象适配器模式的例子:

//目标抽象类，也就是客户所需要的接口
class Target { 
public:
    virtual ~Target() {}
    virtual void func() = 0; // 客户需要的函数接口
};

// 原有的功能实现，不满足客户要求的接口
class Origin {
public:
    void dealWith() {
        // xxx
    }
};

// 适配器类，借助原有的实现，完成客户要求的接口
class Adapter : public Target {
public:
    Adapter() {}
    virtual ~Adapter() {}
    // 在适配器中，重新实现客户要求的函数接口，完成"转换"的作用
    virtual void func() override {
        origin.dealWith();
    }
private:
    Origin origin;
};


int main() {
    Target* target = new  Adapter();
    target->func();

    return 0;
}


优点：
    将目标类和适配者类解耦，引入一个适配器类实现代码重用，无需修改原有结构；
    增加类的透明和复用，对于客户端而言，适配者类是透明的；
    对象适配器可以把不同适配者适配到同一个目标（对象适配器）；


