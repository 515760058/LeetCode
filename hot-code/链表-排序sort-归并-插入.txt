
剑指 Offer 25. 合并两个排序的链表  （归并排序链表）
// 迭代版本
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* dummy = new ListNode(-1);
        ListNode* pre = dummy;
        while (l1 != nullptr && l2 != nullptr) {
            if (l1->val <= l2->val) {
                pre->next = l1;
                pre = pre->next;
                l1 = l1->next;
            } else {
                pre->next = l2;
                pre = pre->next;
                l2 = l2->next;
            }
        }
        // 某一条链表先结束了 判断还剩下哪一条
        if (l1 != nullptr) {
            pre->next = l1;
        }
        if (l2 != nullptr) {
            pre->next = l2;
        }
        // 返回头节点dummy->next
        pre = dummy->next;
        delete dummy;
        return pre;
    }
};




23. 合并K个升序链表
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if (lists.empty()) {
            return nullptr;
        }
        ListNode* result = lists[0];
        // result依次和lists[i]进行两两合并
        for (int i = 1; i < lists.size(); ++i) {
            result = mergeTwoLists(result, lists[i]);
        }
        return result;
    }

private:
    // 剑指 Offer 25. 合并两个排序的链表  （归并排序链表）
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* dummy = new ListNode(-1);
        ListNode* pre = dummy;
        while (l1 != nullptr && l2 != nullptr) {
            if (l1->val <= l2->val) {
                pre->next = l1;
                pre = pre->next;
                l1 = l1->next;
            } else {
                pre->next = l2;
                pre = pre->next;
                l2 = l2->next;
            }
        }
        // 某一条链表先结束了 判断还剩下哪一条
        if (l1 != nullptr) {
            pre->next = l1;
        }
        if (l2 != nullptr) {
            pre->next = l2;
        }
        // 返回头节点dummy->next
        pre = dummy->next;
        delete dummy;
        return pre;
    }
};



148. 排序链表  sort
// 使用归并排序  nlogn
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if (head == nullptr || head->next == nullptr) {
            return head;
        }
        // 快慢指针找中间节点slow
        ListNode* fast = head;
        ListNode* slow = head;
        while ((fast->next) && (fast->next->next)) {
            slow = slow->next;
            fast = fast->next->next;
        }
        //cout << slow->val << ", " << fast->val << endl;
        // 从中间节点slow 断开
        fast = slow->next; // fast指向后半段
        slow->next = nullptr; // 前半段和后半段 断开
        // 递归的排序
        ListNode* l1 = sortList(head);
        ListNode* l2 = sortList(fast);
        return mergeTwoSortedList(l1, l2); // 归并排序
    }

private:
    // 归并 两个有序链表
    ListNode* mergeTwoSortedList(ListNode* l1, ListNode* l2) {
        ListNode* dummy = new ListNode(-1);
        ListNode* pre = dummy;
        while (l1 && l2) {
            if (l1->val <= l2->val) {
                pre->next = l1;
                pre = pre->next;
                l1 = l1->next;
            } else {
                pre->next = l2;
                pre = pre->next;
                l2 = l2->next;
            }
        }
        // 某一条链表先结束了 判断还剩下哪一条
        if (l1 != nullptr) {
            pre->next = l1;
        }
        if (l2 != nullptr) {
            pre->next = l2;
        }
        // 返回头节点dummy->next
        pre = dummy->next;
        delete dummy;
        return pre;
    }
};



147. 对链表进行插入排序
class Solution {
public:
    ListNode* insertionSortList(ListNode* head) {
        ListNode* dummy = new ListNode(-1);
        while (head) {
            ListNode* p = dummy;
            while(p->next && p->next->val < head->val) {
                p = p->next;
            }
            ListNode* q = head;
            head = head->next;

            q->next = p->next;
            p->next = q;
        }
        // 返回头结点
        head = dummy->next;
        delete dummy;
        return head;
    }
};

