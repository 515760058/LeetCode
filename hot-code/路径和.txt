113. 路径总和 II    剑指Offer34二叉树中和为某一值的路径 （从根到叶节点的路径和是给定值target）
输入一棵二叉树和一个整数，打印出二叉树中节点值的和为输入整数的所有路径。从树的根节点开始往下一直到叶节点所经过的节点形成一条路径。
class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int target) {
        vector<vector<int>> res;
        preOrder(root, target, {}, res);
        return res;
    }

private:
    void preOrder(TreeNode* root, int target, vector<int> tmp, vector<vector<int>>& res) {
        if (root == nullptr) {
            return;
        }
        // 到了叶节点 更新target
        tmp.push_back(root->val);
        target -= root->val;
        // 判断是否符合条件
        if (root->left == nullptr && root->right == nullptr && target == 0) {
            res.push_back(tmp);
            return;
        }
        // 向下递归子树
        preOrder(root->left,  target, tmp, res);
        preOrder(root->right, target, tmp, res);
    }
};


437. 路径总和 III     面试题 04.12求和路径   任意一段从上向下的路径的和是给定值
给定一个二叉树，它的每个结点都存放着一个整数值。
找出路径和等于给定数值的路径总数。
路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。
// 双层遍历
class Solution {
public:
    int pathSum(TreeNode* root, int sum) {
        int res = 0;
        preOrder(root, sum, res);
        return res;
    }

private:
    // 先序遍历每一个节点(为了把每一个节点都当做根节点处理)
    void preOrder(TreeNode* root, int sum, int& res){
        if(root == NULL){
            return;
        }
        // 前序遍历
        findPath(root, sum, res); // 从该节点开始 路径和为sum的数量
        preOrder(root->left, sum, res); // 从左子树开始，路径和为sum的数量
        preOrder(root->right, sum, res); // 从右子树开始，路径和为sum的数量
    }

    // 从该节点开始，路径和等于sum的数量res
    void findPath(TreeNode* root, int sum, int& res){
        if(root == NULL){
            return;
        }
        // 处理当前节点
        sum -= root->val;
        // 当前路径可以
        if (sum == 0) {
            ++res;
        }
        //继续往左右子树递归
        findPath(root->left,  sum, res);
        findPath(root->right, sum, res);
    }
};



124. 二叉树中的最大路径和  
路径 被定义为一条从树中任意节点出发，沿父节点-子节点连接，达到任意节点的序列。同一个节点在一条路径序列中 至多出现一次 。该路径 至少包含一个 节点，且不一定经过根节点。
路径和 是路径中各节点值的总和。
给你一个二叉树的根节点 root ，返回其 最大路径和 。
class Solution {
public:
    int maxPathSum(TreeNode* root) {
        if (root == nullptr) {
            return 0;
        }
        int res = INT_MIN;
        maxPathSumCore(root, res);
        return res;
    }

private:
    int maxPathSumCore(TreeNode* root, int& res) {
        if (root == nullptr) {
            return 0;
        }
        int leftSum = maxPathSumCore(root->left, res);
        leftSum = max(leftSum, 0); // 如果子树的作用是负的 则忽略不计 当做0
        int rightSum = maxPathSumCore(root->right, res);
        rightSum = max(rightSum, 0);
        // 当前节点的路径和  更新最大值
        int curr = leftSum + rightSum + root->val;
        res = max(res, curr);
        // 向上返回最大的一侧： (1)左子树路径+当前节点  (2)右子树路径+当前节点  (3)当前节点
        return max(leftSum, rightSum) + root->val;
    }
};


