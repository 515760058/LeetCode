567. 字符串的排列
// 滑动窗口 （窗口大小是固定的）
class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        unordered_map<char, int> target;
        for (char c : s1) {
            target[c]++;
        }

        int left = 0;
        unordered_map<char, int> window;
        for (int right = 0; right < s2.size(); ++right) {
            // 插入
            window[s2[right]]++;
            // 保持窗口大小  删除元素
            if (right - left >= s1.size()) {
                char c = s2[left++];
                window[c]--;
                if (window[c] == 0) {
                    window.erase(c);
                }
            }
            // 判断相等
            if (window == target) {
                return true;
            }
        }  
        return false;
    }
};





438. 找到字符串中所有字母异位词
// 滑动窗口（窗口大小是固定的）
class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        unordered_map<char, int> target;
        for (char c : p) {
            target[c]++;
        }

        vector<int> result;
        int left = 0;
        unordered_map<char, int> window;
        for (int right = 0; right < s.size(); ++right) {
            // 放入一个元素
            window[s[right]]++;
            // 移除前一个元素  保持窗口大小固定
            if (right - left >= p.size()) {
                char c = s[left++];
                window[c]--;
                if (window[c] == 0) {
                    window.erase(c);
                }
            }
            // debug
            //for (auto w : window) {
            //    cout << w.first << w.second << "; ";
            //}
            //cout << endl;
            // 判断相等
            if (window == target) {
                result.push_back(left);
            }
        }
        return result;
    }
};





3. 无重复字符的最长子串    剑指Offer48最长不含重复字符的子字符串
// 滑动窗口（窗口大小是变化的）
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int length = 0;
        set<char> window;
        int left = 0;
        for (int right = 0; right < s.size(); ++right) {
            // 发现了重复的字符，要把上一个s[right]及其前面出现的字符 都删掉
            if (window.count(s[right])) {
                while (s[left] != s[right]) {
                    window.erase(s[left++]); // 删除上一个重复字符的前面的字符
                }
                window.erase(s[left++]); // 删除上一个重复的字符
            }
            // 放入当前字符
            window.insert(s[right]);
            // 更新大小
            length = max(length, (int)window.size());
        }
        return length;
    }
};

