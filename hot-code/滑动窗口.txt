567. 字符串的排列
// 滑动窗口 （窗口大小是固定的）
class Solution {
public:
    bool checkInclusion(string s1, string s2) {
        unordered_map<char, int> target;
        for (char c : s1) {
            target[c]++;
        }

        int left = 0;
        unordered_map<char, int> window; // 不仅可以记录每个key 还可以记录频数
        for (int right = 0; right < s2.size(); ++right) {
            // 插入
            window[s2[right]]++;
            // 保持窗口大小  删除元素
            if (right - left >= s1.size()) {
                char c = s2[left++];
                window[c]--;
                if (window[c] == 0) {
                    window.erase(c);
                }
            }
            // 判断相等
            if (window == target) {
                return true;
            }
        }
        return false;
    }
};





438. 找到字符串中所有字母异位词
// 滑动窗口（窗口大小是固定的）
class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        unordered_map<char, int> target;
        for (char c : p) {
            target[c]++;
        }

        vector<int> result;
        int left = 0;
        unordered_map<char, int> window;
        for (int right = 0; right < s.size(); ++right) {
            // 放入一个元素
            window[s[right]]++;
            // 移除前一个元素  保持窗口大小固定
            if (right - left >= p.size()) {
                char c = s[left++];
                window[c]--;
                if (window[c] == 0) {
                    window.erase(c);
                }
            }
            // 判断相等
            if (window == target) {
                result.push_back(left);
            }
        }
        return result;
    }
};



76. 最小覆盖子串
给你一个字符串 s 、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 "" 。
注意：如果 s 中存在这样的子串，我们保证它是唯一的答案。
输入：s = "ADOBECODEBANC", t = "ABC"    输出："BANC"
class Solution {
public:
    string minWindow(string s, string t) {
        // 统计t中每个字符的数量
        unordered_map<char,int> need;
        for(char c : t){
            need[c]++;
        }
        //start,len记录最小子串的起始索引和长度
        int start = 0;
        int len = INT_MAX;
        //left,right维护滑动窗口window的大小
        unordered_map<char,int> window; // 记录key和出现次数
        int left = 0;
        int right = 0;
        int valid = 0;
        while (right < s.size()) {
            // 窗口win向右扩大  插入右边的字符c
            char c = s[right++];
            if (need.count(c)) {
                window[c]++;
                if (window[c] == need[c]) { // 有一种字符数量相等了
                    valid++;
                }
            }
            // 有valid种字符数量相等了: win已经覆盖了need
            while(valid == need.size()) {
                // 更新一个更短的结果
                if (right - left < len) {
                    start = left;
                    len = right - left;
                }
                // 窗口win从左边收缩  删除左边的字符f
                char f = s[left++];
                if (need.count(f)) {
                    if(window[f] == need[f]) { // 破坏了一种字符的数量相等
                        valid--;
                    } 
                    window[f]--;
                } 
            }
        }
        // 返回
        if (len == INT_MAX) {
            return "";
        }
        return s.substr(start,len);
    }
};





3. 无重复字符的最长子串    剑指Offer48最长不含重复字符的子字符串
// 滑动窗口（窗口大小是变化的）
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int length = 0;
        set<char> window;
        int left = 0;
        for (int right = 0; right < s.size(); ++right) {
            // 发现了重复的字符，要把上一个s[right]及其前面出现的字符 都删掉
            if (window.count(s[right])) {
                while (s[left] != s[right]) {
                    window.erase(s[left++]); // 删除上一个重复字符的前面的字符
                }
                window.erase(s[left++]); // 删除上一个重复的字符
            }
            // 放入当前字符
            window.insert(s[right]);
            // 更新大小
            length = max(length, (int)window.size());
        }
        return length;
    }
};




239. 滑动窗口最大值
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        if (nums.empty() || k <= 0) {
            return {};
        }
        vector<int> res;
        multiset<int> win; // 滑动窗口 元素可重复  大小固定为k
        for (int i = 0; i < nums.size(); ++i) {
            if (i < k) { // 放入元素  补满k个
                win.insert(nums[i]);
            } else {
                // 滑窗中的最大元素
                res.push_back(*win.rbegin());
                // 更新元素
                auto iter = win.find(nums[i-k]);
                win.erase(iter); // 删除左侧的元素
                win.insert(nums[i]); // 补充新元素
            }
        }
        // 最后一个元素
        res.push_back(*win.rbegin());
        return res;
    }
};

