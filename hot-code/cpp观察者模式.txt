观察者模式：多个观察者观察一个目标对象的状态，若该目标对象状态发生改变，则观察者会对此作出反应。

// 观察者接口
class IObserver {
public:
    IObserver() {};
    virtual ~IObserver() {};
    // 接口：纯虚函数
    virtual void update(int state) = 0;
};

// 不同的观察者实现类
#include <iostream>
class ObserverA :public IObserver {
public:
    virtual void update(int state) override {
        // 对目标对象的状态，做出ObserverA的响应
        std::cout << "ObserverA:" << state << std::endl;
    }
};

class ObserverB :public IObserver {
public:
    virtual void update(int state) override {
        // 对目标对象的状态，做出ObserverB的响应
        std::cout << "ObserverB:" << state << std::endl;
    }
};


// 观察的目标对象
class Target {
private:
    std::list<IObserver*> m_list; // 保存所有的观察者指针 //父类(接口)的指针
    int m_state; // 目标对象的状态

public:
    // 构造函数 析构函数
    Target() : m_state(0) {}
    ~Target();
    // 修改目标对象的状态
    void set_state(int state) { m_state = state; }
    // 增加一个观察者
    void attach(IObserver* observer) { m_list.push_back(observer); }
    // 删除一个观察者
    void detach(IObserver* observer) { m_list.remove(observer); }
    // 把状态通知给所有的观察者
    void notify() {
        for (IObserver* obs : m_list) {
            obs->update(m_state);
        }
    }
};



int main() {
    // 目标对象 和 两个观察者
    Target target;
    ObserverA observera;
    ObserverB observerb;

    target.attach(&observera);
    target.attach(&observerb);

    target.set_state(23);
    target.notify();

    target.detach(observera);
    target.detach(observerb);

    return 0;
}


