#include <iostream>
#include <vector>

using namespace std;

// 快速排序  data[start, end]区间的数据
void quickSort(vector<int>& data, int start, int end) {
    if (start >= end) {
        return;
    }
    int privot = data[start]; // 锚点
    // 前后指针
    int i = start;
    int j = end;
    while (i < j) {
        // 从右向左找第一个小于privot的数 data[j]
        while(i < j && data[j] >= privot) {
            j--;
        }
        if(i < j) { // 把data[j]放在合适的位置
            data[i++] = data[j];
        }
        // 从左向右找第一个大于等于privot的数 data[i]
        while(i < j && data[i] < privot) {
            i++;
        }
        if(i < j) { // 把data[i]放在合适的位置
            data[j--] = data[i];
        }
    }
    // 摆放锚点
    data[i] = privot;
    // 递归调用
    quickSort(data, start, i-1);
    quickSort(data, i+1, end);
}

int main() {
    vector<int> data { 1, 3, 5, 7, 9, 2, 4, 6, 8, 10 };
    quickSort(data, 0, data.size()-1);
    for (int i : data) {
        cout << i << ", ";
    }
    return 0;
}














//插入
    void InsertSort(vector<int>& nums,int n) {
        for(int i=0;i<n;i++) {
            int temp = nums[i];
            int j = i-1;
            while(j >= 0 && nums[j] >temp) {
                nums[j+1] = nums[j];
                j--;
            }
            nums[j+1] = temp;
        }
    }
    
//折半插入
    void HInsertSort(vector<int>& nums,int n) {
        int i,j,low,high,mid;
        for( i=0;i<n;i++ ){
            int tmp = nums[i];
            low = 0;high = i-1;
            while(low<=high) {
                mid = low+(high-low)/2;
                if(nums[mid] > tmp){
                    high = mid - 1;
                }else{
                    low = mid + 1;
                }
            }
            for(j=i-1;j>=high+1;j--){
                nums[j+1] = nums[j];
            }
            nums[high+1] = tmp;
        }
    }
    
//希尔
    void ShellSort(vector<int>& nums,int n){
        for(int dk = n/2;dk>=1;dk=dk/2){
            for(int i=dk;i<n;++i) {
                if(nums[i]<nums[i-dk]){
                    int tmp = nums[i],j;
                    for(j = i-dk;j>=0&&tmp<nums[j];j-=dk){
                        nums[j+dk] = nums[j];
                    }
                    nums[j+dk]=tmp;
                }
            }
        }
    }
    
//冒泡
    void BubbleSort(vector<int>& nums,int n){
        for(int i=0;i<n-1;i++) {
            bool flag = false;
            for(int j=n-1;j>i;j--) {
                if(nums[j-1]>nums[j]){
                    swap(nums[j-1],nums[j]);
                    flag = true;
                }
            }
            if(flag == false){
                return ;
            }
        }
    }
    

//简单选择
    void SelectSort(vector<int>& nums,int n) {
        for(int i=0;i<n-1;i++) {
            int min = i;
            for(int j=i+1;j<n;j++) {
                if(nums[j]<nums[min]) min = j;
               
            }
            if(min!=i) swap(nums[i],nums[min]);
        }
    }
 
// 堆排序
    void HeapSort(vector<int> &nums, int size){
       for(int i=size/2 - 1; i >= 0; i--){
            adjust(nums, size, i);
        }
         for(int i = size - 1; i >= 1; i--){
                swap(nums[0], nums[i]);        
                adjust(nums, i, 0);              
            }
        }

   void adjust(vector<int> &nums, int len, int index){
        int left = 2*index + 1; // index的左子节点
        int right = 2*index + 2;// index的右子节点

        int maxIdx = index;
        if(left<len && nums[left] > nums[maxIdx])     maxIdx = left;
        if(right<len && nums[right] > nums[maxIdx])     maxIdx = right;
 
        if(maxIdx != index) {
            swap(nums[maxIdx], nums[index]);
            adjust(nums, len, maxIdx);
        }
    }

