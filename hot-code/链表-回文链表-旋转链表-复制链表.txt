234. 判断链表是否回文
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if (head == nullptr || head->next == nullptr) {
            return true;
        }
        // 快慢指针 找到链表的中间节点slow
        ListNode* fast = head;
        ListNode* slow = head;
        while (fast && fast->next) {
            slow = slow->next;
            fast = fast->next->next;
        }
        //cout << slow->val << endl;  // 1234指向3   123指向2

        // 翻转 后半段链表
        ListNode* half = nullptr;
        int len = getListLen(head); // 链表的长度
        if (len & 0x1) { // 奇数
            half = reverseList(slow->next);
        } else {
            half = reverseList(slow);
        }

        // 判断是否回文
        while (head && half) {
            if (head->val != half->val) {
                return false;
            }
            head = head->next;
            half = half->next;
        }
        return true;
    }

private:
    // 链表长度
    int getListLen(ListNode* head) {
        int len = 0;
        while (head) {
            len++;
            head = head->next;
        }
        return len;
    }

    // 翻转链表
    ListNode* reverseList(ListNode* head) {
        ListNode* pre = nullptr; // 前一个节点
        ListNode* cur = head;    // 当前节点
        ListNode* temp = nullptr;

        while (cur != nullptr) {
            temp = cur->next; // 临时保存下一个节点
            cur->next = pre; // 当前节点 指向 前一个节点
            // 向后移动
            pre = cur;
            cur = temp;
        }
        return pre;
    }
};




61. 旋转链表
给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if (head == nullptr || k == 0) {
            return head;
        }
        // 求长度 同时得出尾节点tmp
        ListNode* tmp = head;
        int len = 1;
        while (tmp->next) {
            len++;
            tmp = tmp->next;
        }
        k = len - k % len; // 新的k   从尾节点向后跑k步

        tmp->next = head; // 首位相连 形成环
        // 从原来的尾节点 继续向后跑k步
        for (int step = 0; step < k; ++step) {
            tmp = tmp->next;
        }
        head = tmp->next; // 新的首节点
        tmp->next = nullptr; // 断开环
        return head;
    }
};



138. 复制带随机指针的链表      剑指 Offer 35. 复杂链表的复制
class Solution {
public:
    Node* copyRandomList(Node* head) {
        map<Node*, Node*> m;
        m[nullptr] = nullptr;
        // 第一遍 创建节点保存对应地址
        Node* curr = head;
        while (curr) {
            m[curr] = new Node(curr->val); // 创建对应节点 存到map中
            // 下一个节点
            curr = curr->next;
        }
        // 修改新节点的指针
        curr = head;
        while (curr) {
            Node* newNode = m[curr]; // 对应的新节点
            newNode->next = m[curr->next];
            newNode->random = m[curr->random];
            // 下一个节点
            curr = curr->next;
        }
        return m[head];
    }
};
