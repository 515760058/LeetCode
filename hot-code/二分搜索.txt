// 704. 二分查找  （有序，且没有重复元素）
class Solution {
public:
    int binSearch(vector<int>& nums, int target) {
        int left = 0;
        int right = nums.size() - 1;
        while (left <= right) {
            int mid = left + ((right-left) >> 1);
            if (nums[mid] < target) {
                left = mid + 1;
            } else if (nums[mid] > target) {
                right = mid - 1;
            } else if (nums[mid] == target) {
                return mid;
            }
        }
        return -1;
    }
};


// 34. 在排序数组中查找元素的第一个和最后一个位置
输入：nums = [5,7,7,8,8,10], target = 8      输出：[3,4]
输入：nums = [5,7,7,8,8,10], target = 6      输出：[-1,-1]
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int left = left_bound(nums, target);
        int right = right_bound(nums, target);
        return {left, right};
    }

private:
    // 有序 有重复元素， 找到最左边的target的下标   没有target就返回-1
	// 这个函数不是lower_bound  lower_bound在下面
    int left_bound(vector<int>& nums, int target) {
        int left = 0;
        int right = nums.size() - 1;
        while (left <= right) {
            int mid = left + ((right-left) >> 1);
            if (nums[mid] < target) {
                left = mid + 1;
            } else if (nums[mid] > target) {
                right = mid - 1;
            } else if (nums[mid] == target) {
                // 不返回 锁定左侧边界
                right = mid - 1;
            }
        }
		// 最后检查left越界的情况
		if(left >= nums.size() || nums[left] != target) {
			return -1;
		}
        return left;
	}

	// 有序 有重复元素， 找到最右边的target的下标   没有target就返回-1
	// 这个函数不是upper_bound  upper_bound在下面
    int right_bound(vector<int>& nums, int target) {
        int left = 0;
        int right = nums.size() - 1;
        while (left <= right) {
            int mid = left + ((right-left) >> 1);
            if (nums[mid] < target) {
                left = mid + 1;
            } else if (nums[mid] > target) {
                right = mid - 1;
            } else if (nums[mid] == target) {
                // 不返回 锁定右侧边界
                left = mid + 1;
            }
        }
		// 最后检查right越界的情况
		if(right < 0 || nums[right] != target) {
			return -1;
		}
        return right;
	}
};



// lower_bound和upper_bound 搜索的范围是左闭右开的区间 [ , )
// 查找第一个 >= target数字的下标
int lower_bound(vector<int>& nums, int target) {
	int first = 0;
	int last = nums.size() - 1;
	while(first < last){
		int middle = (first+last) >> 1;
		if(array[middle] < target ) //当middle小于要找的位置 ， first +1 也不会超过key的位置，最多相同
			 first = middle + 1;
 		else
			last = middle ; //middle有可能等于要找的位置 ， last = middle ， 用first不断逼近
		
	}
	return first;
}

// 查找第一个 > target数字的下标   (好象还有问题)
int upper_bound(vector<int>& nums, int target) {
	int first = 0;
	int last = nums.size() - 1;
	while(first < last){
		int middle = (first+last) >> 1;
		if(array[middle] > target ) //此时的middle一定大于要找的位置。用first不断逼近
			last = middle;
		else
			first = middle +1; //当middle等于要找的位置， 我们记录first = middle+1
		
	}
	return first;
}
