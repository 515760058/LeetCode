命令模式：
https://blog.csdn.net/sinat_21107433/article/details/102810123
在软件设计模式中，有一种将命令的发送者与执行者解耦的设计模式，命令的发送方和接收方（执行方）没有任何关联。

命令模式可以将请求（命令）的发送者与接收者完全解耦，发送者与接收者之间没有直接引用关系。
发送请求的对象只需要知道如何发送请求，而不必知道请求是如何完成的。

命令模式：将一个请求封装为一个对象，从而可用不同的请求对客户进行参数化，对请求排队或者记录请求日志，以及支持可撤销的操作。


命令模式的UML结构如上图，命令模式一共有以下几种角色：
    Command（抽象命令类）：是一个抽象类，声明了用于执行命令的execute()接口函数。
    ConcreteCommand（具体命令类）：具体的命令类，实现了执行命令的接口execute()，它对应具体的接收者（Receiver）对象，将接收者的动作action()绑定其中。
        在execute()方法中将调用接收者的动作action()。（这就是定义中的“将请求封装成一个对象”的体现）
    Invoker（调用者）：请求的发送者，通过命令对象来执行请求。一个调用者不需要在设计时确定其接收者，所以调用者通过聚合，与命令类产生关联。
        具体实现中，可以将一个具体命令对象注入到调用者中，再通过调用具体命令对象的execute()方法，实现简介请求命令执行者（接收者）的操作。
    Receiver（接收者）： 实现处理请求的具体操作（action）。


代码实例
房间中的开关（Button）就是命令模式的一个实现，本例使用命令模式来模拟开关功能。
开关可控制的对象包括电灯（Lamp）和风扇（Fan）。用户每次触摸（touch）开关，都可以打开或者关闭电灯或者电扇。

#include <iostream>
#include <string>
using namespace std;

// 接收者：电灯类
class LampReceiver {
public :
    LampReceiver() : lampState(false) { }
    void on(){
        lampState = true;
        cout << "Lamp is on" << endl;
    }
    void off(){
        lampState = false;
        cout << "Lamp is off" << endl;
    }
    bool getLampState(){
        return lampState;
    }
private:
    bool lampState = false;
};

// 接收者：电灯类
class FanReceiver {
public :
    FanReceiver() : fanState(false) { }
    void on(){
        fanState = true;
        cout << "fan is on" << endl;
    }
    void off(){
        fanState = false;
        cout << "fan is off" << endl;
    }
    bool getLampState(){
        return fanState;
    }
private:
    bool fanState;
};

// 抽象命令类 Command
class Command {
public:
    virtual ~Command(){}
    // 声明抽象接口：发送命令
    virtual void execute() = 0;
};

// 电灯的具体命令类
class LampCommand :public Command {
public:
    LampCommand(){ lamp = new LampReceiver(); }
    virtual ~LampCommand() { delete lamp; }

    // 实现具体的命令操作，操作对应的电灯
    virtual void execute() override {
        if (lamp->getLampState()) { lamp->off(); }
        else { lamp->on(); }
    }
private:
    LampReceiver* lamp; // 含有一个电灯对象 控制这个电灯
};

// 风扇的具体命令类
class FanCommand :public Command {
public:
    FanCommand(){ fan = new FanReceiver(); }
    virtual ~FanCommand() { delete fan; }

    // 实现具体的命令操作，操作对应的风扇
    virtual void execute() override {
        if (fan->getLampState()) { fan->off(); }
        else { fan->on(); }
    }
private:
    FanReceiver* fan; // 含有一个风扇对象 控制这个风扇
};

// 调用者 Button
class Button {
public:
    Button() : command(nullptr) {}
    // 设置具体命令类对象
    void setCommand(Command *cmd) { command = cmd; }
    // 触摸按钮，执行对应的命令
    void touch(){
        cout << "触摸开关:   ";
        command->execute();
    }
private:
    Command* command;
};

// 客户端代码示例
int main() {
    // 实例化调用者：按钮
    Button button;
    // 按钮控制电灯  按钮只管touch发送命令就行了
    LampCommand lampCmd;
    button.setCommand(&lampCmd);
    button.touch();
    button.touch();
    button.touch();
    // 按钮控制风扇  按钮只管touch发送命令就行了
    FanCommand fanCmd;
    button.setCommand(&fanCmd);
    button.touch();
    button.touch();
    button.touch();

    return 0;
}


可以看到，客户端只需要有一个调用者和抽象命令类，在给调用者注入命令时，再将命令类具体化（这也就是定义中“可用不同的请求对客户进行参数化”的体现）。
客户端并不知道命令是如何传递和响应，只需发送命令touch()即可，由此实现命令发送者和接收者的解耦。
如果系统中增加了新的功能，功能键与新功能对应，只需增加对应的具体命令类，在新的具体命令类中调用功能类的对应方法，然后将该具体命令类通过注入的方式加入到调用者，无需修改原有代码，符合开闭原则。



一个命令，对应多个接收者。
// 命令队列类
class CommandVec {
public:
    CommandVec(){ }
    void addCommand(Command *cmd){
        CommandVec.push_back(cmd);
    }
    void execute(){
        for (Command* cmd : CommandVec) {
            cmd->execute();
        }
    }
private:
    vector<Command*> CommandVec;
};

// 调用者
class Button2 {
private:
    CommandVec cmdVec;
public:
    Button2(){}
    // 注入具体命令队列类对象
    void addCommandQueue(Command* cmd) { cmdVec.push_back(cmd); }
    // 发送命令：触摸按钮
    void touch(){
        cout << "触摸开关:   ";
        cmdVec.execute();
    }
};



命令模式其他应用
    5.1.记录请求日志
    将历史请求记录保存在日志里，即请求日志。很多软件系统都提供了日志文件，记录运行过程中的流程。
    一旦系统发生故障，日志成为了分析问题的关键。
    日志也可以保存命令队列中的所有命令对象，每执行完一个命令就从日志里删除一个对应的对象。

    5.2.宏命令
    宏命令又叫组合命令，是组合模式和命令模式的结合。
    宏命令是一个具体命令类，拥有一个命令集合，命令集合中包含了对其他命令对象的引用。
    宏命令通常不直接与请求者交互，而是通过它的成员来遍历调用接收者的方法。
    当调用宏命令的execute()方法时，就遍历执行每一个具体命令对象的execute()方法。（类似于前面的命令队列）

总结
    优点：
        降低系统耦合度，将命令的请求者与接收者分离解耦，请求者和发送者不存在直接关联，各自独立互不影响。
        便于扩展：新的命令很容易加入到系统中，且符合开闭原则。
        较容易实现命令队列或宏命令。
        为请求的撤销和回复操作提供了一种设计实现方案。
    缺点：
        命令模式可能导致系统中有过多的具体命令类，增加了系统中对象的数量。
    适用环境：
        系统需要将请求发送者和接收者解耦，使得发送者和接收者互不影响。
        系统需要在不同时间指定请求、将请求排队和执行请求。
        系统需要支持命令的撤销和恢复操作。
        系统需要将一组操作组合在一起形成宏命令。

