144. 二叉树的前序遍历 （使用栈）
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> result;
        stack<TreeNode*> s;
        if (root != nullptr) {
            s.push(root);
        }
        while (!s.empty()) {
            // 访问节点
            TreeNode* temp = s.top();
            s.pop();
            result.push_back(temp->val);
            // 先放右子树 后弹出
            if (temp->right != nullptr) {
                s.push(temp->right);
            }
            // 后放左子树 先弹出
            if (temp->left != nullptr) {
                s.push(temp->left);
            }
        }
        return result;
    }
};




94. 二叉树的中序遍历 （使用栈）
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> result;
        stack<TreeNode*> s;
        TreeNode* p = root;
        while (!s.empty() || p != nullptr) {
            if (p != nullptr) { // 尽量向左子树走  直到p是null
                s.push(p);
                p = p->left;
            } else {
                // p是null 表示左子树走到底了 访问当前节点
                p = s.top();
                s.pop();
                result.push_back(p->val);
                // 向右走一步 （到了右子树之后 还要尽量向左子树走）
                p = p->right;
            }
        }
        return result;
    }
};




145. 二叉树的后序遍历 （使用栈）
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> reslut;

        stack<TreeNode*> s;
        TreeNode* cur = root;
        TreeNode* p = nullptr; //用来记录上一节点
        while(!s.empty() || cur != nullptr){
            while(cur != nullptr){
                s.push(cur);
                cur = cur->left;
            }
            cur = s.top();
//            后序遍历的过程中在遍历完左子树跟右子树cur都会回到根结点。所以当前不管是从左子树还是右子树回到根结点都不应该再操作了，应该退回上层。
//            如果是从右边再返回根结点，应该回到上层。
            //主要就是判断出来的是不是右子树，是的话就可以把根节点=加入到reslut了
            if(cur->right == nullptr || cur->right == p){
                reslut.push_back(cur->val);
                s.pop();
                p = cur;
                cur = nullptr;
            }else{
                cur = cur->right;
            }
        }
        return reslut;
    }
};



剑指 Offer 33. 二叉搜索树的后序遍历序列
给定一个序列 判断该序列是否可能是BST的后序遍历结果。
class Solution {
public:
    bool verifyPostorder(vector<int>& postorder) {
        if (postorder.empty()) {
            return true;
        }
        return verifyPostorder(postorder, 0, postorder.size()-1);
    }
private:
    // 验证[start, end]区间是否符合后序
    bool verifyPostorder(vector<int>& postorder, int start, int end) {
        if (start >= end) {
            return true;
        }
        // 根节点   后序遍历 最后一个是根节点
        int root = postorder[end];
        // 找左子树的节点: 小于等于根
        int mid = start;
        while (mid < end) {
            if (postorder[mid] > root) {
                break;
            }
            mid++;
        }
        // 左子树[start, mid-1]都小于等于根   所以右子树[mid, end-1]都要大于根！
        for (int i = mid; i < end; ++i) {
            if (postorder[i] <= root) {
                return false;
            }
        }
        // 继续验证左右子树
        return verifyPostorder(postorder, start, mid-1) && verifyPostorder(postorder, mid, end-1);
    }
};



102. 二叉树的层序遍历
// 递归版
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> level;
        preOrder(root, 0, level); // 根节点的深度视为0
        return level;
    }

private:
    // 先序遍历 递归
    void preOrder(TreeNode *root, int depth, vector<vector<int>> &level) {
        if (root == nullptr) {
            return;
        }
        // 如果第一次出现此深度 就在level的末尾新增一个空数组
        if (depth >= level.size()) {
            level.push_back(vector<int> {});
        }
        // 把深度为depth的节点 放在相应的层
        level[depth].push_back(root->val);
        preOrder(root->left, depth + 1, level); // 左子树 下一层深度
        preOrder(root->right, depth + 1, level); // 右子树 下一层深度
    }
};

// 迭代版  （使用队列）
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> res;
        if (root == nullptr) {
            return res;
        }
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()) {
            vector<int> tmp; // 准备保存一层的数据
            // 遍历一层
            int len = q.size();
            for(int i = 0; i < len; i++){
                // 访问节点
                TreeNode* node = q.front();
                q.pop();
                tmp.push_back(node->val);
                // 保存其左右子树
                if(node->left != nullptr) {
                    q.push(node->left);
                }
                if(node->right != nullptr) {
                    q.push(node->right);
                }
            }
            // 保存一层的数据
            res.push_back(tmp);
        }
        return res;
    }
};




剑指 Offer 32 - I. 从上到下打印二叉树
class Solution {
public:
    vector<int> levelOrder(TreeNode* root) {
        vector<int> res;
        if (root == nullptr) {
            return res;
        }
        // BFS
        queue<TreeNode*> q;
        q.push(root);
        while (!q.empty()) {
            TreeNode* node = q.front();
            q.pop();
            res.push_back(node->val);
            if (node->left) { q.push(node->left); }
            if (node->right) { q.push(node->right); }
        }
        return res;
    }
};


剑指 Offer 32 - II. 从上到下打印二叉树 II
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> res;
        preOrder(root, 0, res); // 前序遍历 递归
        return res;
    }

private:
    void preOrder(TreeNode* root, int level, vector<vector<int>>& res) {
        if (root == nullptr) {
            return;
        }
        if (level >= res.size()) {
            res.push_back( vector<int>() );
        }
        res[level].push_back(root->val);
        preOrder(root->left, level+1, res);
        preOrder(root->right, level+1, res);
    }
};



987. 二叉树的垂序遍历
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

// leetcode102 层序遍历  记录每个节点的深度和垂度
// 假设当前节点的垂度索引是x, 则其左子树节点垂度是x-1, 右子树节点垂度是x+1.
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        map<int, vector<MyNode>> mymap; // key:垂序索引 value:对应的数组
        preOrder(root, 0, 0, mymap); // 根节点的垂度视为0 深度也视为0

        // 根据深度对垂序进行排序 并转成二维数组
        vector<vector<int>> res;
        for (auto& element : mymap) {
            // 对每个垂度数组(element.second)进行排序
            sort(element.second.begin(), element.second.end());
            // 将这个垂度数组 转成结果数组
            vector<int> temp;
            for (auto& mynode : element.second) {
                temp.push_back(mynode.val);
            }
            res.push_back(temp);
        }
        return res;
    }

private:
    // 记录节点的值 及其深度
    struct MyNode {
        int val;
        int depth;
        MyNode(int _val, int _depth) {
            val = _val;
            depth = _depth;
        }
        // 排序 先按深度从小到大, 深度相同就按值从小到大
        bool operator < (const MyNode& rhs) {
            if (this->depth != rhs.depth) {
                return this->depth < rhs.depth;
            }
            return this->val < rhs.val;
        }
    };

    // 使用先序遍历的方式实现垂序遍历 结果保存在mymap中
    // vertical垂度  depth深度
    void preOrder(TreeNode* node, int vertical, int depth, map<int, vector<MyNode>>& mymap) {
        if (node == nullptr) {
            return;
        }
        mymap[vertical].push_back( MyNode(node->val, depth) );
        preOrder(node->left,  vertical-1, depth+1, mymap); // 左子树 垂度-1
        preOrder(node->right, vertical+1, depth+1, mymap); // 右子树 垂度+1
    }
};


