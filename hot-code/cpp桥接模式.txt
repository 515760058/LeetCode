桥接模式
https://blog.csdn.net/sinat_21107433/article/details/102694306
如果系统中的某个类存在两个独立变化的维度，通过桥接模式可以将这两个维度分离开来，使两者独立扩展。

比如：
用手机玩游戏，手机和游戏是两个独立变化的维度，增加一个游戏对手机没有影响，增加一个手机对游戏也没有影响。
手机上可以安装游戏，而游戏必须在手机上玩，从这个角度而言，手机和游戏之间存在较强的耦合。
但两者可以很好的解耦，且解耦后扩展灵活：所有游戏安装在一个手机上，新出一个游戏，新安装就ok！买了新手机，同样可以装上所有游戏。这就是桥接模式：
桥接模式：将抽象部分与它的实现部分解耦，使得两者都能够独立变化。

桥接模式将两个独立变化的维度设计成两个独立的继承等级结构（而不会将两者耦合在一起形成多层继承结构），
在抽象层将二者建立起一个抽象关联，该关联关系类似一座桥，将两个独立的等级结构连接起来，故曰“桥接模式”。

桥接模式包含以下角色：
    Abstraction（抽象类）：定义抽象类的接口，由聚合关系可知，抽象类中包含一个Implementor类型的对象，它与Implementor之间有关联关系，既可以包含抽象业务方法，也可以包含具体业务方法；
    Implementor（接口类）：定义实现类的接口，这个接口可以与Abstraction类的接口不同。一般而言，实现类接口只定义基本操作，而抽象类的接口还可能会做更多复杂的操作。
    RefinedAbstraction（扩充抽象类）：具体类，实现在抽象类中定义的接口，可以调用在Implementor中定义的方法；
    ConcreteImplementor（具体实现类）：具体实现了Implementor接口，在不同的具体实现类中实现不同的具体操作。运行时ConcreteImplementor将替换父类。
简言之，在Abstraction类中维护一个Implementor类指针，需要采用不同的实现方式的时候只需要传入不同的Implementor派生类就可以了。

          Phone抽象类       <----------       game接口类
               |                                 |
       MiPhone  HwPhone                    game1  game2

新手机上能够迅速安装（install）游戏，并玩（play）游戏
新增加一个游戏时，能够在已有手机上安装（install）并玩（play）


// 游戏接口
class Game {
public:
    virtual ~Game() {}
    virtual void play() = 0; // 游戏接口
};

//具体实现类GameA
class GameA : public Game {
public:
    virtual ~GameA(){}
    virtual void play() override {
        cout << "玩游戏A"  << endl;
    }
};
 
//具体实现类GameB
class GameB : public Game {
public:
    virtual ~GameB(){}
    virtual void play() override {
        cout << "玩游戏B"  << endl;
    }
};

//抽象类Phone
class Phone {
public:
    virtual ~Phone() {}
    
    virtual void install(Game* _game) { //安装游戏的函数接口，也可以根据需求延迟到子类实现
        game = _game;
    }
    virtual void play() { //玩游戏的函数接口，也可以根据需求延迟到子类实现
        game->play();
    }
private:
    Game *game; // 含有一个Game接口类的指针，可以调用Game子类的函数
};

class MiPhone : public Phone { };
class HwPhone : public Phonr { };


int main() {
    GameA* gamea = new GameA();
    GameB* gameb = new GameB();

    Phone* mi = new MiPhone();
    mi->install(gamea);
    mi->play();
    mi->install(gameb);
    mi->paly();

    Phone* hw = new HwPhone();
    hw->install(gamea);
    hw->play();
    hw->install(gameb);
    hw->paly();

    delete gamea;
    delete gameb;
    delete mi;
    delete hw;

    return 0;
}

优点：
    分离抽象接口与实现部分，使用对象间的关联关系使抽象与实现解耦；
    桥接模式可以取代多层继承关系，多层继承违背单一职责原则，不利于代码复用；
    桥接模式提高了系统可扩展性，某个维度需要扩展只需增加实现类接口或者具体实现类，而且不影响另一个维度，符合开闭原则。
缺点：
    桥接模式难以理解，因为关联关系建立在抽象层，需要一开始就设计抽象层；
    如何准确识别系统中的两个维度是应用桥接模式的难点。
适用场景： 
    如果一个系统需要在抽象化和具体化之间增加灵活性，避免在两个层次之间增加继承关系，可以使用桥接模式在抽象层建立关联关系；
    抽象部分和实现部分可以各自扩展而互不影响；
    一个类存在多个独立变化的维度，可采用桥接模式。

