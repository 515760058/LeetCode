42. 接雨水
//核心点：对于每个位置，如果左右两侧都存在更高（实际找的是最高）的柱子，那这个位置是可以有雨水的
//做法：对每个位置：在其左侧柱子中找最大值 并在其右侧柱子中找最大值，然后根据左右两侧最值计算雨水量
class Solution {
public:
    int trap(vector<int>& height) {
        vector<int> left(height.size(), 0);
        vector<int> right(height.size(), 0);
        //对每个柱子i 其左边的最大值
        for(int i = 1; i < height.size(); ++i){
            left[i] = max(left[i-1], height[i-1]);
        }
        //对每个柱子i 其右边的最大值
        for(int i = height.size() - 2; i >= 0; --i){
            right[i] = max(right[i+1], height[i+1]);
        }
        //统计所有的雨水量
        int totalRain = 0;
        for(int i = 0; i < height.size(); ++i){
            int h = min(left[i], right[i]); //左右两侧矮的柱子 作为水面高度
            if(h > height[i]){ //水面高度要大于当前柱子的高度  才能储水: h-height[i]
                totalRain += h - height[i];
            }
        }
        return totalRain;
    }
};




407. 接雨水 II
/*
接雨水I中，我们维护了左右两个最高的墙，那么在这里，就是维护周围一个圈，用堆来维护周围这一圈中的最小元素。为什么是维护最小的元素不是最大的元素呢，因为木桶原理呀。这个最小的元素从堆里弹出来，和它四个方向的元素去比较大小，看能不能往里灌水，怎么灌水呢，如果用方向就比较复杂了，我们可以用visited数组来表示哪些遍历过，哪些没遍历过。如果当前弹出来的高度比它周围的大，他就能往矮的里面灌水了，灌水后要把下一个柱子放进去的时候，放的高度要取两者较大的，也就是灌水后的高度，不是它原来矮的时候的高度了，如果不能灌水，继续走。
Given the following 3x6 height map:
[ [1,4,3,1,3,2],
  [3,2,1,3,2,4],
  [2,3,3,2,3,1]]
就拿这个例子来说，我们先把第一圈都放进去，然后开始从堆中弹出，第一圈，最小值是1（遍历时候标记为访问过），1从堆里弹出来，比如弹出来1(坐标[0,3])，它下方的3没有被访问过，尝试灌水，发现不能灌水，3入堆，然后继续弹。比如说，我此时弹出来一个3（坐标[1,0]），它能向右边2(坐标[1,1])灌水，那这边就可以统计了，然后我们要插入2(坐标[1,1])这个位置，但是插入的时候，要记得你得是插入的高度得是灌水后的高度，而不是原来的高度了
*/

class Solution {
private:
    struct Node {
        int x;
        int y;
        int val; // 高度
        Node(int i, int j, int v) : x(i), y(j), val(v) {}
        // 高度小的单元  是小的
        bool operator<(const Node& node) const {
            return val > node.val;
        }
    };
    // 四个方向
    int dx[4] = {-1, 1, 0,  0};
    int dy[4] = { 0, 0, 1, -1};

public:
    int trapRainWater(vector<vector<int>>& heightMap) {
        if (heightMap.empty()) {
            return 0;
        }

        int m = heightMap.size();
        int n = heightMap[0].size();

        vector<vector<int>> visited(m, vector<int>(n, 0));
        priority_queue<Node> qu;
        // 把最外层一圈的单元 放入优先队列中, 并标记为visited  (最外层一圈的的单元是不可能储水的)
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (i ==0 || j == 0 || i == m-1 || j == n-1) {
                    qu.push(Node(i, j, heightMap[i][j]));
                    visited[i][j] = 1;
                }
            }
        }
        // 从最外层的圈 每次弹出最矮的单元  向内圈收缩  
        int ans = 0;
        while(!qu.empty()) {
            Node node = qu.top();
            qu.pop();
            for (int i = 0; i < 4; i++) {
                int newx = node.x + dx[i];
                int newy = node.y + dy[i];
                // 检查坐标是否有效 || 已经访问过
                if (newx < 0 || newx >= m || newy < 0 || newy >= n || visited[newx][newy] == 1) {
                    continue;
                }
                int nextVal = heightMap[newx][newy];
                // 内层单元是否能储水? 能储多少水?
                if (nextVal < node.val) { // 内层单元的高度nextVal比较外层的矮 因此可以储水
                    ans += node.val - nextVal; // 加上储水量: node.val - nextVal
                    nextVal = node.val;  // 注意: 内层单元储水后  单元高度就变成了储水高度！
                }
                // 标记访问 并放入队列
                visited[newx][newy] = 1;
                qu.push(Node(newx, newy, nextVal));
            }
        }
        return ans;
    }
};






778. 水位上升的泳池中游泳
// 二分法(猜出一个水位高度mid) + DFS(判断mid是否有效)
class Solution {
public:
    int swimInWater(vector<vector<int>>& grid) {
        // 左右起始点
        int left = 0;
        int right = 0; // grid数组中的最大值
        for (vector<int>& vec : grid) {
            right = max(right, *max_element(vec.begin(), vec.end()));
        }
        // 二分法 猜测一个水位mid 并判断该水位是否可以
        int water = right;
        while (left <= right) {
            int mid = (left + right) >> 1;
            if (check(grid, mid)) {
                water = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        return water;
    }

private:
    // 水位为waterHeight时  使用dfs验证是否可以到达终点
    bool check(vector<vector<int>>& grid, int waterHeight) {
        vector<vector<bool>> visited(grid.size(), vector<bool>(grid[0].size(), false));
        bool reach = false;
        dfs(grid, 0, 0, visited, waterHeight, reach);
        return reach;
    }

    void dfs(vector<vector<int>>& grid, int i, int j, vector<vector<bool>>& visited, int waterHeight, bool& reach) {
        // 校验坐标
        if (i < 0 || i >= grid.size() || j < 0 || j >= grid[0].size()) {
            return;
        }
        // 已访问过该位置 || 该位置比当前水位waterHeight更高,无法通过
        if (visited[i][j] || grid[i][j] > waterHeight) {
            return;
        }
        // 到达(N-1, N-1)
        if (i == grid.size()-1 && j == grid[0].size()-1) {
            reach = true;
            return;
        }
        visited[i][j] = true;
        dfs(grid, i-1, j, visited, waterHeight, reach);
        dfs(grid, i+1, j, visited, waterHeight, reach);
        dfs(grid, i, j-1, visited, waterHeight, reach);
        dfs(grid, i, j+1, visited, waterHeight, reach);
    }
};

