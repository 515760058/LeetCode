1382. 将二叉搜索树变平衡 （重建BST）
给你一棵二叉搜索树，请你返回一棵 平衡后 的二叉搜索树，新生成的树应该与原来的树有着相同的节点值。
 //  2 中序遍历 重建二叉树
class Solution {
public:
    TreeNode* balanceBST(TreeNode* root) {
        vector<int> seq;
        inOrder(root, seq);
        return build(seq, 0, seq.size()-1);
    }

private:
    // 中序遍历获得BST的序列
    void inOrder(TreeNode* root, vector<int>& seq) {
        if (root == nullptr) {
            return;
        }
        inOrder(root->left, seq);
        seq.push_back(root->val);
        inOrder(root->right, seq);
    }

    // 根据中序序列  重建二叉树
    TreeNode* build(vector<int>& seq, int start, int end) {
        if (start > end) {
            return nullptr;
        }
        int mid = (start + end) >> 1;
        TreeNode* root = new TreeNode(seq[mid]); // 序列中间的数 是根节点
        root->left  = build(seq, start, mid-1);  // 构建左子树  根节点左边的序列
        root->right = build(seq, mid+1, end);    // 构建右子树  根节点右边的序列
        return root;
    }
};


701. 向二叉搜索树中插入节点
class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int val) {
        if (root == nullptr) { // 当前就是插入点
            return new TreeNode(val);
        }
        if (val < root->val) { // 插入到左子树
            root->left = insertIntoBST(root->left, val);
        } else if (val > root->val) { // 插入到右子树
            root->right = insertIntoBST(root->right, val);
        }
        return root;
    }
};


450. 删除二叉搜索树中的节点
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        if (root == nullptr) {
            return nullptr;
        }
        if (key < root->val) { // 待删除节点在左子树中
            root->left = deleteNode(root->left, key);
        } else if (key > root->val) { // 待删除节点在右子树中
            root->right = deleteNode(root->right, key);
        } else { // key == root.val   root就是待删除节点
            // root只有一个子树  返回另一个子树作为新的根
            if (root->left == nullptr) {  return root->right; }
            if (root->right == nullptr) { return root->left; }
            // root的左右子树都存在， 把（右子树的最左叶子）作为新的根
            TreeNode* minNode = getMin(root->right);
            root->val = minNode->val;
            // 在右子树中 删除新的根
            root->right = deleteNode(root->right, minNode->val);
        }
        return root;
    }

private:
    // BST最左边的节点 就是最小的
    TreeNode* getMin(TreeNode* node) {
        while (node->left != nullptr) {
            node = node->left;
        }
        return node;
    }
};


669. 修剪二叉搜索树
给你二叉搜索树的根节点 root ，同时给定最小边界low 和最大边界 high。
通过修剪二叉搜索树，使得所有节点的值在[low, high]中。
修剪树不应该改变保留在树中的元素的相对结构（即，如果没有被移除，原有的父代子代关系都应当保留）。
class Solution {
public:
    TreeNode* trimBST(TreeNode* root, int low, int high) {
        if (root == nullptr) {
            return nullptr;
        }
        // 当前节点小于low 只能寄希望于右子树(比当前节点大)是否存在符合条件的
        if (root->val < low) {
            return trimBST(root->right, low, high);
        }
        // 当前节点大于high 只能寄希望于左子树(比当前节点小)是否存在符合条件的
        if (root->val > high) {
            return trimBST(root->left, low, high);
        }
        // 当前节点在[low, high]范围内 左右子树都有可能符合条件
        root->left = trimBST(root->left, low, high);
        root->right = trimBST(root->right, low, high);
        return root;
    }
};


