98. 验证二叉搜索树
给定一个二叉树，判断其是否是一个有效的二叉搜索树。
class Solution {
public:
    bool isValidBST(TreeNode* root) {
        return validBST(root, LONG_MIN, LONG_MAX);
    }

private:
    bool validBST(TreeNode* root, long low, long high) {
        if (root == nullptr) {
            return true;
        }
        // 节点值不在[low, high]范围内
        if (root->val <= low || high <= root->val) {
            return false;
        }
        // 验证左右子树
        return validBST(root->left, low, root->val) &&
               validBST(root->right, root->val, high);
    }
};




剑指 Offer 33. 二叉搜索树的后序遍历序列
给定一个序列 判断该序列是否可能是BST的后序遍历结果。
class Solution {
public:
    bool verifyPostorder(vector<int>& postorder) {
        if (postorder.empty()) {
            return true;
        }
        return verifyPostorder(postorder, 0, postorder.size()-1);
    }
private:
    // 验证[start, end]区间是否符合后序
    bool verifyPostorder(vector<int>& postorder, int start, int end) {
        if (start >= end) {
            return true;
        }
        // 根节点   后序遍历 最后一个是根节点
        int root = postorder[end];
        // 找左子树的节点: 小于等于根
        int mid = start;
        while (mid < end) {
            if (postorder[mid] > root) {
                break;
            }
            mid++;
        }
        // 左子树[start, mid-1]都小于等于根   所以右子树[mid, end-1]都要大于根！
        for (int i = mid; i < end; ++i) {
            if (postorder[i] <= root) {
                return false;
            }
        }
        // 继续验证左右子树
        return verifyPostorder(postorder, start, mid-1) && verifyPostorder(postorder, mid, end-1);
    }
};

