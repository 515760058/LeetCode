// 416. 分割等和子集
// 0-1背包问题的衍生
class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int sum = accumulate(nums.begin(), nums.end(), 0);
        if (sum & 0x1) { // 和是奇数 不可能的
            return false;
        }
        sum /= 2; // 表示背包的容量
        int N = nums.size(); // 表示可选择的物品数量

        vector<vector<bool>> dp(N+1, vector<bool>(sum+1, false));
        // 初始情况
        for (int i = 0; i <= N; ++i) {
            dp[i][0] = true; // 背包容量为0时，全都不选。是成立的。
        }
        // 开始dp
        for (int i = 1; i <= N; ++i) {
            for (int w = 1; w <= sum; ++w) {
                if (w < nums[i-1]) { // 当前的背包容量仅有w 不能装下物品i-1
                    dp[i][w] = dp[i-1][w];
                } else { // 当前的背包容量w  可以装下物品i-1
                         //    不装物品i-1 ||  装物品i-1(要给物品i-1预留出容量)
                    dp[i][w] = dp[i-1][w] | dp[i-1][w-nums[i-1]];
                }
            }
        }
        return dp[N][sum];
    }
};



