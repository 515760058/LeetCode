355. 设计推特
class Twitter {
private:
    // 推特消息
    struct Tweet {
        int tweetId;
        int time;
        Tweet(int _tweetId, int _time) {
            tweetId = _tweetId;
            time = _time;
        }
        bool operator< (const Tweet& t) const { // 重载< 给优先队列使用
            return time < t.time;
        }
    };

    map<int, set<int>> userFollow; // key:用户id  value:该用户的关注的人
    map<int, list<Tweet>> userTweets; // key:用户id  value:该用户发表的推特消息

    int timestamp = 0; // 时间戳
public:
    /** Initialize your data structure here. */
    Twitter() { }
    
    /** Compose a new tweet. */
    void postTweet(int userId, int tweetId) {
        userTweets[userId].push_front( Tweet(tweetId, timestamp++) );
        userFollow[userId].insert(userId);
    }
    
    /** Retrieve the 10 most recent tweet ids in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user herself. Tweets must be ordered from most recent to least recent. */
    vector<int> getNewsFeed(int userId) {
        vector<int> res;
        priority_queue<Tweet> pq;
        // 获取该用户关注的人
        set<int>& followee = userFollow[userId];
        for (int id : followee) {
            // 从每个关注用户中 最多获取10条消息 放在优先队列中
            if (!userTweets.count(id)) { 
                continue;
            }
            list<Tweet>& msgs = userTweets[id];
            auto iter = msgs.begin();
            for (int i = 0; i < 10 && iter != msgs.end(); ++i, ++iter) {
                pq.push(*iter);
            }
        }
        // 从优先队列中 最多取出10条消息 作为结果
        for (int i = 0; i < 10 && (!pq.empty()); ++i) {
            res.push_back( pq.top().tweetId );
            pq.pop();
        }
        return res;
    }
    
    /** Follower follows a followee. If the operation is invalid, it should be a no-op. */
    void follow(int followerId, int followeeId) {
        userFollow[followerId].insert(followeeId);
    }
    
    /** Follower unfollows a followee. If the operation is invalid, it should be a no-op. */
    void unfollow(int followerId, int followeeId) {
        if (followerId == followeeId) { // 不能取关自己
            return;
        }
        userFollow[followerId].erase(followeeId);
    }
};


/**
 * Your Twitter object will be instantiated and called as such:
 * Twitter* obj = new Twitter();
 * obj->postTweet(userId,tweetId);
 * vector<int> param_2 = obj->getNewsFeed(userId);
 * obj->follow(followerId,followeeId);
 * obj->unfollow(followerId,followeeId);
 */
