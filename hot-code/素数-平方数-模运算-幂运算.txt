快速的计算素数
// 判断一个数x是否是素数
bool isPrime(int x){
        if (x <= 1) {
            return false;
        }
        for(int i = 2; i*i <= x; i++) { // 在[2, sqrt(x)]这个区间直接没有发现可整除的因子，就可以断定是素数了
            if(x % i == 0) { // 存在可整除的因子i 不是素数
                return false;
            }
        }
        return true;
}
如果x是素数，那么x的倍数肯定不是素数。




279. 完全平方数
给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。
/*
任何正整数都可以拆分成不超过4个数的平方和 ---> 答案只可能是1,2,3,4
    (1)如果一个数最少可以拆成4个数的平方和，则这个数还满足 n = (4^a)*(8b+7) ---> 因此可以先看这个数是否满足上述公式，如果不满足，答案就是1,2,3了
    (2)如果这个数本来就是某个数的平方，那么答案就是1，否则答案就只剩2,3了
    (3)如果答案是2，即n=a^2+b^2，那么我们可以枚举a，来验证，如果验证通过则答案是2
    (4)只能是3
*/
class Solution {
public:
    // 四平方和定理: 任何一个正整数都可以表示成不超过四个整数的平方之和
    int numSquares(int n) {
        // 情况1：满足n=4^a(8b+7)的时候，可以写成四个平方数之和
        while (n % 4 == 0) {
            n /= 4;
        }
        if(n % 8 == 7) {
            return 4;
        }
        // 情况2：满足这个数本身就是某个数的平方，那么答案就是1
        int r = (int)sqrt(n);
        if(r*r == n) {
            return 1;
        }
        // 情况3：这个数写成两个数的平方之和
        for (int i = 1; i*i <= n; i++) {
            int temp = (int) sqrt(n - i*i);
            if (n == temp*temp + i*i) {
                return 2;
            }
        }
        // 剩下最后一种情况
        return 3;
    }
};

/*
class Solution {
public:
    // dp不是最优解 可以作为练习dp使用
    int numSquares(int n) {
        vector<int> dp(n+1, INT_MAX);
        for (int i = 0; i*i <= n; i++) {
            dp[i*i] = 1;
        }

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j*j <= i; j++) {
                dp[i] = min(dp[i], dp[i-j*j] + 1);
            }
        }

        return dp[n];
    }
};
*/





50. Pow(x, n)  幂指数运算
class Solution {
public:
    double myPow(double x, int n1) {
        long n = n1;
        if(n == 0){
            return 1.0;
        }
        if(n < 0){
            return 1.0 / myPowCore(x, -n);
        }
        return myPowCore(x, n);
    }

private:    
    //幂指数n 是正整数
    double myPowCore(double x, long n){
        // 递归的结束情况
        if(n == 0) { return 1.0; }
        if(n == 1) { return x; }
        // 计算一半
        double res = myPowCore(x, n/2);
        if (n & 0x1) { //n是奇数
            return res*res*x;
        } else {       //n是奇数
            return res*res;
        }
    }
};



372. 超级次方
// 计算a的b次方  并对mod取模
class Solution {
public:
    int superPow(int a, vector<int>& b) {
        // 递归的结束点
        if (b.empty()) {
            return 1;
        }
        // 取出最后一个数
        int last = b.back();
        b.pop_back();
        // 将原问题化简 缩小规模递归求解
        int part1 = myPow(a, last);
        int part2 = myPow(superPow(a, b), 10);
        // 合并出结果
        return part1 * part2 % MOD;
    }

private:
    const static int MOD = 1337;
    // 计算a的k次方 然后对MOD求模
    int myPow(int a, int k) {
        a %= MOD;
        int res = 1;
        for (int i = 0; i < k; ++i) {
            res *= a;    // 这里有乘法 是潜在的溢出点
            res %= MOD;  // 对乘法结果取模
        }
        return res;
    }
};





1780. 判断一个数字是否可以表示成三的幂的和
// 转化为3进制数，如果某一位出现2则不满足要求
class Solution {
public:
    bool checkPowersOfThree(int n) {
        while (n > 0) {
            if (n % 3 == 2) {
                return false;
            }
            n /= 3;
        }
        return true;
    }
};



