227. 基本计算器 II    加减乘除      面试题 16.26. 计算器
给你一个字符串表达式 s ，请你实现一个基本计算器来计算并返回它的值。
s 由整数和算符 ('+', '-', '*', '/') 组成，中间由一些空格隔开     整数除法仅保留整数部分。
class Solution {
public:
    int calculate(string s) {
        stack<int> st; // 使用栈保存数字(临时结果)
        char op = '+';
        int val;
        istringstream iss(s);
        while (iss >> val) {
            if (op == '+') { // 加法 直接入栈
                st.push(val);
            } else if (op == '-') { // 减法  改成负数入栈
                st.push(-val);
            } else { // 乘法或者除法  先计算结果 再把结果入栈
                int val2 = st.top(); st.pop();
                if (op == '*') { 
                    st.push(val*val2); 
                } else if (op == '/') {
                    st.push(val2/val);
                }
            }
            iss >> op;
        }
        // 计算栈中数字的和
        int res = 0;
        while (!st.empty()) {
            res += st.top();
            st.pop();
        }
        return res;
    }
};




224. 基本计算器   加减和小括号
给你一个字符串表达式 s ，请你实现一个基本计算器来计算并返回它的值。
s 由数字、'+'、'-'、'('、')'、和 ' ' 组成
// 思路：只有加减法，可以把括号全都展开来写，例如 2 - （1 - 3）展开成 2 - 1 + 3。
class Solution {
public:
    int calculate(string s) {
        stack<int> sign; //栈顶记录当前符号
        sign.push(1);    //默认为正

        int res = 0;
        int num = 0;
        int op = 1;
        for (char ch : s) {                   //空格可以不管，直接忽略
            if (ch >= '0' && ch <= '9') {     //取出完整数值
                num = num * 10 + (ch - '0');
                continue;
            }

            res += op * num;                //计算一个运算符
            num = 0;                        //数值清空

            if (ch == '+') {
                op = sign.top();
            } else if (ch == '-') {
                op = -sign.top();
            } else if (ch == '(') {  //进入左括号，把左括号之前的符号置于栈顶
                sign.push(op); 
            } else if (ch == ')') { //退出括号，弹出栈顶符号
                sign.pop();
            }
        }
        //计算最后一个数
        res += op * num;
        return res;
    }
};






991. 坏了的计算器
在显示着数字的坏计算器上，我们可以执行以下两种操作：
    双倍（Double）：将显示屏上的数字乘 2；
    递减（Decrement）：将显示屏上的数字减 1 。
最初，计算器显示数字 X。返回显示数字 Y 所需的最小操作数。

/* BFS会超时
解题思路: 逆向考虑。一般情况，Y > X, 从Y去反推X，存在两种可能：
    偶数，直接除以2
    奇数 + 1，再除以2
以上过程不断循环直到 Y <= X
  剩下情况： 如果 X > Y 那 就是 Y-X 只能+1， 因为除法必然使数字减少
*/
class Solution {
public:
    int brokenCalc(int X, int Y) {
        int res = 0;
        while (Y > X) {
            if (Y % 2 == 1) {
                ++Y;
            } else {
                Y /= 2;
            }
            ++res;
        }
        return res + X - Y;
    }
};




772. 基本计算器 III (会员题)



770. 基本计算器 IV （太难了吧）
