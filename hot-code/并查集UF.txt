// 并查集 (数字版本的基本代码)
class UF {
private:
    vector<int> parent;  // 索引idx表示节点 对应数据表示其父节点
public:
    // 构造函数 初始化n个节点的并查集
    UF(int n) {
        parent.resize(n);
        for(int i = 0; i < n; i++) {
            parent[i] = i;
        }
    }
    // 合并两个节点i和j
    void make_union(int i, int j) {
        int rooti = find(i);
        int rootj = find(j);
        if (rooti != rootj) {
            parent[rooti] = rootj; // 合并
        }
    }
    // 查找x的根节点
    int find(int x) {
        while (parent[x] != x) {
            parent[x] = parent[parent[x]]; // 路径压缩
            x = parent[x];
        }
        return x;
    }
};



547. 省份数量
class Solution {
public:
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();
        // 初始化n个节点  
        UF uf(n);
        // 遍历 合并连接的节点
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < i; j++) {
                if(isConnected[i][j] == 1) {
                    uf.make_union(i, j);
                }
            }
        }
        // 查找根节点的数量
        set<int> roots;
        for (int i = 0; i < n; ++i) {
            int root = uf.find(i);
            roots.insert(root);
        }
        return roots.size();
    }
};




990. 等式方程的可满足性
class Solution {
public:
    bool equationsPossible(vector<string>& equations) {
        UF uf(26);
        // 先把等式中的字母 都合并
        for (string& equation : equations) {
            if (equation[1] == '=') {
                int left = equation[0] - 'a';
                int right = equation[3] - 'a';
                uf.make_union(left, right);
            }
        }
        // 对于不等式 检查是否成立
        for (string& equation : equations) {
            if (equation[1] == '!') {
                int left = equation[0] - 'a';
                int right = equation[3] - 'a';
                // 如果相等的关系成立 就是逻辑冲突
                if (uf.find(left) == uf.find(right)) {
                    return false;
                }
            }
        }
        return true;
    }
};




684. 冗余连接
class Solution {
public:
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        int n = edges.size();
        UF uf(n+1);
        for (vector<int>& edge : edges) {
            // 这个edge是冗余的
            if (uf.find(edge[0]) == uf.find(edge[1])) {
                return edge;
            }
            // 合并
            uf.make_union(edge[0], edge[1]);
        }
        return {};
    }
};



1319. 连通网络的操作次数
class Solution {
public:
    //并查集
    // 1. 线缆是否足够：N台计算机最少需要N-1条线缆。
    // 2. 线缆足够的情况下：N台计算机处在x个（非连通）集合中，需要x-1次操作
    int makeConnected(int n, vector<vector<int>>& connections) {
        int lines = connections.size();
        // 线缆是否足够
        if(n - 1 > lines) { return -1; }
        UF uf(n); // 并查集
        // 合并
        for (vector<int>& connection : connections) {
            uf.make_union(connection[0], connection[1]);
        }
        // 统计集合的数量
        set<int> roots;
        for (int i = 0; i < n; ++i) {
            int root = uf.find(i);
            roots.insert(root);
        }
        return roots.size() - 1;
    }
};



947. 移除最多的同行或同列石头
class Solution {
// 并查集  把行和列合并
// M行N列的二维平面  使用0 ~ M-1来表示每一行    使用M+0 ~ M+N-1来表示[0, N-1]列
// 一个坐标[x, y] 表示把第x行和第M+y列合并起来
// 现在行列的范围是最大是10000  因此M取最大10000
public:
    int removeStones(vector<vector<int>>& stones) {
        UF uf(2*M);
        // 合并
        for (vector<int>& stone : stones) {
            int row = stone[0];     // 行号
            int col = stone[1] + M; // 列号
            uf.make_union(row, col);
        }
        // 查找每个行号/列号的root  记录合并后集合的数量
        set<int> roots;
        for (vector<int>& stone : stones) {
            int row = stone[0];     // 行号
            int col = stone[1] + M; // 列号
            roots.insert(uf.find(row));
            roots.insert(uf.find(col));
        }
        return stones.size() - roots.size();
    }
private:
    const static int M = 10000;
};





