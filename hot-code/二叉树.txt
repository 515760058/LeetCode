剑指 Offer 55 - II. 平衡二叉树
class Solution {
public:
    bool isBalanced(TreeNode* root) {
        bool balance = true;
        checkDepth(root, balance);
        return balance;
    }

private:
    int checkDepth(TreeNode* root, bool& balance) {
        if (root == nullptr) {
            return 0;
        }
        int leftDepth = checkDepth(root->left, balance);
        int rightDepth = checkDepth(root->right, balance);
        if (abs(leftDepth - rightDepth) > 1) {
            balance = false;
        }
        return max(leftDepth, rightDepth) + 1;
    }
};




剑指 Offer 68 - I. 二叉搜索树的最近公共祖先
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if (root == nullptr) {
            return nullptr;
        }
        // p,q都小于root，都在root的左子树上
        if (p->val < root->val && q->val < root->val) {
            return lowestCommonAncestor(root->left, p, q);
        }
        // p,q都大于root，都在root的右子树上
        if (p->val > root->val && q->val > root->val) {
            return lowestCommonAncestor(root->right, p, q);
        }
        // p,q等于root  或者 一个大于root一个小于root  此时root就是公共祖先
        return root;
    }
};



剑指 Offer 68 - II. 二叉树的最近公共祖先
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if (root == nullptr) {
            return nullptr;
        }
        // 当前节点就是p或q
        if (root == p || root == q) {
            return root;
        }
        TreeNode* left = lowestCommonAncestor(root->left, p, q);
        TreeNode* right = lowestCommonAncestor(root->right, p, q);
        // p,q 一个在左子树 一个在右子树  当前节点就是公共祖先
        if (left != nullptr && right != nullptr) {
            return root;
        }
        // p,q 都在左子树
        if (left != nullptr) {
            return left;
        }
        // p,q 都在右子树
        if (right != nullptr) {
            return right;
        }
        return nullptr;
    }
};



剑指 Offer 26. 树的子结构
class Solution {
public:
    // 双重递归
    bool isSubStructure(TreeNode* A, TreeNode* B) {
        if (B == nullptr) {
            return false;
        }
        bool found = false;
        preOrder(A, B, found);
        return found;
    }

private:
    // 第一重递归  对A进行前序遍历 从A中找一个起始节点
    void preOrder(TreeNode* A, TreeNode* B, bool& found) {
        if (A == nullptr || found) {
            return;
        }
        if (A->val == B->val) {
            // 进入第二重递归, 判断子结构
            found = isSubStructureCore(A, B);
        }
        preOrder(A->left, B, found);
        preOrder(A->right, B, found);
    }
    // 第二重递归  判断子结构
    bool isSubStructureCore(TreeNode* A, TreeNode* B) {
        if (B == nullptr) {
            return true;
        }
        if (A == nullptr) { // 隐含:B不是null
            return false;
        }
        if (A->val != B->val) {
            return false;
        }
        // 当前节点相等 判断左右子树
        return isSubStructureCore(A->left, B->left) && isSubStructureCore(A->right, B->right);
    }
};




剑指 Offer 27. 二叉树的镜像
class Solution {
public:
    TreeNode* mirrorTree(TreeNode* root) {
        if (root == nullptr) {
            return nullptr;
        }
        // 交换当前的左右子树指针
        swap(root->left, root->right);
        // 递归到下层
        mirrorTree(root->left);
        mirrorTree(root->right);
        return root;
    }
};




剑指 Offer 28. 对称的二叉树
class Solution {
private:
    bool isSymmetricCore(TreeNode* left, TreeNode* right) {
        if (left == nullptr && right == nullptr) { // 两个都为null
            return true;
        }
        if (left == nullptr || right == nullptr) { // 一个为null 另一个不是null
            return false;
        }
        if (left->val != right->val) { // 两个都不为null
            return false;
        }
        return isSymmetricCore(left->left, right->right) && isSymmetricCore(left->right, right->left);
    }

public:
    bool isSymmetric(TreeNode* root) {
        if (root == nullptr) {
            return true;
        }
        return isSymmetricCore(root->left, root->right);
    }
};





剑指 Offer 36. 二叉搜索树与双向链表
class Solution {
public:
    Node* treeToDoublyList(Node* root) {
        if (root == nullptr) {
            return NULL;
        }   
        Node* head = nullptr; // head保存头结点
        Node* pre = nullptr;  // pre保存中序遍历过程中的上一个节点
        inOrder(root, head, pre);
        head->left = pre;     //最后pre指向最后一个节点
        pre->right = head;
        return head;
    }
    void inOrder(Node* root, Node*& head, Node*& pre) { // 注意是指针的引用
        if(root == NULL) {
            return;
        }

        inOrder(root->left, head, pre);
        if (pre == nullptr) { //说明当前是第一个节点，作为头结点 
            head = root;
        } else {
            root->left  = pre;
            pre->right = root;
        }
        pre = root;
        inOrder(root->right, head, pre);
    }
};



面试题34. 二叉树中和为某一值的路径    113. 路径总和 II
class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int target) {
        vector<vector<int>> res;
        preOrder(root, target, {}, res);
        return res;
    }

private:
    void preOrder(TreeNode* root, int target, vector<int> tmp, vector<vector<int>>& res) {
        if (root == nullptr) {
            return;
        }
        // 到了叶节点 更新target
        tmp.push_back(root->val);
        target -= root->val;
        // 判断是否符合条件
        if (root->left == nullptr && root->right == nullptr && target == 0) {
            res.push_back(tmp);
            return;
        }
        // 向下递归子树
        preOrder(root->left,  target, tmp, res);
        preOrder(root->right, target, tmp, res);
    }
};
