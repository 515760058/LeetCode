105. 从前序与中序遍历序列构造二叉树
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        if (preorder.empty()) {
            return nullptr;
        }
        // 在中序遍历中 每个元素的下标 便于后面查找
        map<int, int> m;
        for(int i = 0; i < inorder.size(); ++i){
            m[inorder[i]] = i;
        }
        // 开始重建
        return buildTree(m, preorder, 0, preorder.size()-1, inorder, 0, inorder.size()-1);
    }

private:
    TreeNode* buildTree(map<int, int>& m, vector<int>& preorder, int preBeg, int preEnd, vector<int>& inorder, int inBeg, int inEnd) {
        if (preBeg > preEnd || inBeg > inEnd) {
            return nullptr;
        }
        // 前序的第一个节点 就是根节点
        TreeNode* node = new TreeNode(preorder[preBeg]);
        // 左子树的节点数量
        int leftLen = m[preorder[preBeg]] - inBeg;
        // 重建左子树
        node->left = buildTree(m, preorder, preBeg+1, preBeg+leftLen, inorder, inBeg, inBeg+leftLen-1);
        // 重建右子树
        node->right = buildTree(m, preorder, preBeg+1+leftLen, preEnd, inorder, inBeg+leftLen+1, inEnd);
        return node;
    }
};




106. 从中序与后序遍历序列构造二叉树
/*
思路：和上一篇的由前序和中序类似。
  后序遍历的顺序是左右根  所以最后一个元素是根节点
  再在中序遍历中找到这个节点的位置  则根节点左边是左子树的中序遍历结果  右边是右子树的中序遍历结果
  在后序遍历中同样可以分为两个部分  分别对应左子树的后序遍历结果和右子树的遍历结果
 再递归就可以得到最终的二叉树分布
*/
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int size = inorder.size();
        if(size == 0 || postorder.empty()){
            return NULL;
        }
         //后续遍历的最后一个元素 是根节点
         int r = postorder.back();
         TreeNode *root =new TreeNode(r);
         // 在中序遍历中找到根节点r的位置
         int p = find(inorder.begin(), inorder.end(), r) - inorder.begin();
         // 根据根节点 分别划分左右子树
         vector<int> in_left, in_right, post_left, post_right;
         for (int i = 0; i < size; i++){
             if (i < p){
                in_left.push_back(inorder[i]);
                post_left.push_back(postorder[i]);
             } else if(i > p) {
                in_right.push_back(inorder[i]);
                post_right.push_back(postorder[i-1]); // 这里要注意位置
             }
         }
         //递归下去
         root->left = buildTree(in_left,post_left);
         root->right = buildTree(in_right,post_right);
         return root;
    }
};




889. 根据前序和后序遍历构造二叉树
class Solution {
public:
    TreeNode* constructFromPrePost(vector<int>& pre, vector<int>& post) {
        //递归模板，关键是把 pre 与 post 数组分出左子树部分与右子树部分
        return helper(pre, 0, pre.size()-1, post, 0, post.size()-1);
    }

private:
    TreeNode* helper(vector<int>& pre, int pre_start, int pre_end, vector<int>& post, int post_start, int post_end){
        if(pre_start > pre_end || post_start > post_end){
            return nullptr;
        }
        //post[post_end]是根节点的值
        TreeNode* root = new TreeNode(post[post_end]);
        if(post_end == post_start) return root;

        //pre: 根节点 左子树部分 右子树部分
        //post：左子树部分 右子树部分 根节点
        //pre[pre_start+1]是左子树根，据此找到其在post中的index
        int index = post_start;
        while(post[index] != pre[pre_start+1]){
            index++;
        }
        //然后根据分界线index可以划分pre与post左右子树部分
        //post: post_start:index左 ; index+1:post_end-1 右; post_end 根
        //pre: pre_start根 ; pre_start+1:pre_start+1+ (index-post_start); pre_end-(post_end-1-index-1) :pre_end

        root->left = helper(pre,pre_start+1,pre_start+1+ (index-post_start), post, post_start, index);
        root->right = helper(pre, pre_end-(post_end-1-index-1), pre_end, post, index+1, post_end-1);

        return root;
    }
};


