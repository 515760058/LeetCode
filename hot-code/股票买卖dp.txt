// 121. 买卖股票的最佳时机    剑指Offer63 股票的最大利润
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int minPrice = INT_MAX;
        int profit = 0;
        for (int price : prices) {
            minPrice = min(minPrice, price);// 到目前 最低的价格
            profit = max(profit, price-minPrice); // 当前价格-最低价格
        }
        return profit;
    }
};



// 122. 买卖股票的最佳时机 II
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int profit = 0;
        for (int i = 1; i < prices.size(); ++i) {
            // 今天的价格比上一天的高， 就有利润!
            if (prices[i] > prices[i-1]) {
                profit += (prices[i] - prices[i-1]);
            }
        }
        return profit;
    }
};



// 714. 买卖股票的最佳时机含手续费
//have[i]表示第i天手上持有股票时的收益， no[i]表示第i天手上没有股票时的收益，递推方程：
//   have[i] = max(have[i-1], no[i-1]-prices[i]) （第二项表示在第i天买入了股票）
//   no[i] = max(no[i-1], have[i-1]+prices[i]-fee) （第二项表示在第i天将股票卖出，需扣除手续费）
class Solution {
public:
    int maxProfit(vector<int>& prices, int fee) {
        vector<int> have(prices.size());
        vector<int> no(prices.size());
        // 初始状态
        have[0] = -prices[0];
        no[0] = 0;
        // 开始dp
        for (int i = 1; i < prices.size(); ++i) {
            have[i] = max(have[i-1], no[i-1]-prices[i]);
            no[i] = max(no[i-1], have[i-1]+prices[i]-fee);
        }
        return no[prices.size() - 1];
    }
};




// 309. 最佳买卖股票时机含冷冻期
//have[i]表示第i天手上持有股票时的收益， no[i]表示第i天手上没有股票时的收益，递推方程：
//   have[i] = max(have[i-1], no[i-2]-prices[i]) （第二项表示在第i天买入了股票 但是要从前天算i-2）
//   no[i] = max(no[i-1], have[i-1]+prices[i]) （第二项表示在第i天将股票卖出，需扣除手续费）
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        vector<int> have(prices.size());   
        vector<int> no(prices.size());
        // 初始状态
        have[0] = -prices[0];  // have[0] 表示如果第一天持有的话只能买入，收益为 -prices[0]
        no[0] = 0; // no[0] 表示第一天不持有，那么无作为，收益为 0
        if (have.size() > 1) {
            have[1] = max(have[0], -prices[1]);
            no[1] = max(no[0], have[0]+prices[1]);
        }
        // 开始dp  注意i-2
        for (int i = 2; i < prices.size(); ++i) {
            have[i] = max(have[i-1], no[i-2]-prices[i]);
            no[i] = max(no[i-1], have[i-1]+prices[i]);
        }
        return no[prices.size() - 1];
    }
};






// 123. 买卖股票的最佳时机III    最多K=2次交易
// https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/discuss/39611/Is-it-Best-Solution-with-O(n)-O(1).
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if (prices.empty()) {
            return 0;
        }
        // 初始状态
        int buy1 = -prices[0];
        int sell1 = 0;
        int buy2 = -prices[0];
        int sell2 = 0;
        // 开始dp
        for (int i = 0; i < prices.size(); ++i) {
            buy1 = max(buy1, -prices[i]);         // 用负值统一变量
            sell1 = max(sell1, buy1 + prices[i]); // sell1为 0~i(含)天股市中买卖一次的最优利润
            buy2 = max(buy2, sell1 - prices[i]);  // 仅当＞0才会更新，保证 第二次买入不会与第一次卖出为同一天。而sell1为历史记录保证第二次买入比第一次卖出晚。
            sell2 = max(sell2, buy2 + prices[i]); // 若第二轮买卖为同一天，则不会更新。此操作自然保证sell2为买卖至多两次的最优利润。
        }
        return sell2;
    }
};









// 188. 买卖股票的最佳时机IV  最多K次交易









