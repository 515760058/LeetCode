#include <iostream>
#include <stdio.h>

using namespace std;

// https://blog.csdn.net/haoel/article/details/1948051/

class Base {
public:
    virtual void f() { cout << "Base::f" << endl; }
    virtual void g() { cout << "Base::g" << endl; }
    virtual void h() { cout << "Base::h" << endl; }
};

using ulong = unsigned long; // 64位使用ulong  32位可以使用uint
typedef void(*Fun)(void);  // 函数指针

int main () {
    Base b;
    ulong* ptr = (ulong*) &b; // 指向虚指针
    cout << "对象的首地址：" << ptr << endl;
    cout << "虚指针的内容(虚表的首地址)：" <<  *ptr << endl;
    ulong* tbl = (ulong*) (*ptr); // tbl指针 指向虚表
    cout << "虚表地址(虚表首项)" << *tbl << endl;

    // 指向虚函数
    Fun pFun = nullptr;
    
    pFun = (Fun) (*tbl);     // 指向函数f
    pFun();
	  
    pFun = (Fun) (*(tbl+1)); // 指向函数g
	  pFun();
	  
    pFun = (Fun) (*(tbl+2)); // 指向函数h
	  pFun();

    return 0;
}

// linux64位下编译   g++  vf.cpp
// 运行             ./a.out


