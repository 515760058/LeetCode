33. 搜索旋转排序数组  ：    数组元素是唯一的
    二分搜索法的关键在于获得了中间数后，判断下面要搜索左半段还是右半段。
    我们观察上面红色加粗的数字都是升序的，由此我们可以观察出规律：
        如果中间的数小于最右边的数，则右半段是有序的
            判断target是否处于有序的右半段之中：如果是，就保留右边的区间；否则就保留左边的区间
        如果中间的数大于最右边的数，则左半段是有序的
            判断target是否处于有序的左半段之中：如果是，就保留左边的区间；否则就保留右边的区间
    我们只要在有序的半段里用首尾两个数组来判断目标值是否在这一区域内，这样就可以确定保留哪半边了
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int left = 0;
        int right = nums.size() - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) { // 找到 返回对应的下标
                return mid;
            }
            if (nums[mid] < nums[right]){ // 如果中间的数小于最右边的数，则右半段是有序的
                // 判断target是否处于有序的右半段之中：如果是，就保留右边的区间；否则就保留左边的区间
                if (nums[mid] < target &&  target <= nums[right]){ 
                    left = mid + 1;
                } else{
                    right = mid - 1;
                } 
            } else { // 若中间数大于最右边的数，则左半段是有序的
                // 判断target是否处于有序的左半段之中：如果是，就保留左边的区间；否则就保留右边的区间
                if (nums[left] <= target && target < nums[mid]) {
                    right = mid - 1;
                } else {
                    left = mid + 1;
                } 
            }
        }
        return -1;
    }
};


81. 搜索旋转排序数组 II    数组中含有重复的元素
class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int left = 0;
        int right = nums.size() - 1;
        while(left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) { // 找到了
                return true;
            }
            if (nums[mid] < nums[right]) { // 如果中间的数小于最右边的数，则右半段是有序的
                // 判断target是否处于有序的右半段之中：如果是，就保留右边的区间；否则就保留左边的区间
                if (nums[mid] < target &&  target <= nums[right]){ 
                    left = mid + 1;
                } else{
                    right = mid - 1;
                } 
            } else if (nums[mid] > nums[right]) { // 若中间数大于最右边的数，则左半段是有序的
                // 判断target是否处于有序的左半段之中：如果是，就保留左边的区间；否则就保留右边的区间
                if (nums[left] <= target && target < nums[mid]) {
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            } else { // 和leetcode33题不一样的地方：nums[mid] == nums[right] 确定不了有序的区间，就修正一下right
                right--;
            }
        }
        return false;
    }
};



剑指 Offer 11. 旋转数组的最小数字
class Solution {
public:
    int minArray(vector<int>& numbers) {
        int res = INT_MAX;
        // 二分
        int left = 0;
        int right = numbers.size() - 1;
        while (left <= right) {
            int mid = left + ((right-left) >> 1);
            res = min(res, numbers[mid]); // 更新最小值
            // 选择区间
            if (numbers[mid] > numbers[right]) { // 最小值在后半区间
                left = mid + 1;
            } else if (numbers[mid] < numbers[right]) { // 最小值在前半区间
                right = mid - 1;
            } else { // numbers[mid] == numbers[right]
                --right;
            } 
        }
        return res;
    }
};
