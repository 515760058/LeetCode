442. 数组中重复的数字
给定一个整数数组 a，其中1 ≤ a[i] ≤ n （n为数组长度）, 其中有些元素出现多次而其他元素出现一次。找到所有出现多次的元素。
你可以不用到任何额外空间并在O(n)时间复杂度
class Solution {
public:
    vector<int> findDuplicates(vector<int>& nums) {
        vector<int> res;
        for(int i = 0; i < nums.size(); ++i) {
            int idx = abs(nums[i]) - 1; // 使用abs消除负号的影响
            if (nums[idx] < 0) { // 如果这个idx加上负号了 说明对应的数字是重复出现了
                res.push_back(idx + 1); // 恢复原数字nums[i] = idx + 1
            }
            nums[idx] = -nums[idx]; // 加上负号
        }
        return res;
    }
};



645. 错误的集合（缺失和重复的元素）
class Solution {
public:
    vector<int> findErrorNums(vector<int>& nums) {
        // 找重复的
        int repet = -1;
        for (int i = 0; i < nums.size(); ++i) {
            int idx = abs(nums[i]) - 1;
            if (nums[idx] < 0) { // 已经出现过 记录重复数字
                repet = idx + 1;
            } else {
                nums[idx] = -nums[idx]; //第一次出现 加上负号  标记为已访问过
            }
        }
        // 找缺失的  缺失的数字  其转为下标后  
        int miss = -1;
        for (int i = 0; i < nums.size(); ++i) {
            if (nums[i] > 0) {
                miss = i + 1;
                break;
            }
        }
        return {repet, miss};
    }
};




969. 煎饼排序
//按数字处理：
//  先把最大的数字弄到正确的位置：找到它的下标, 先翻到第一个位置，再翻到最后一个位置
//  再处理第二大的数字：找到它的下标, 先翻到第一个位置，再翻到倒数第二个位置
//  .....
class Solution {
public:
    vector<int> pancakeSort(vector<int>& A) {
        vector<int> res;
        for(int i = A.size(); i > 0; --i){ // 每次寻找最大的数字i
            int idx = max_element(A.begin(), A.begin()+i) - A.begin() + 1; // 数字i的下标+1  (下标从1开始计算)
            if(idx != i){ // 数字i的位置不正确：就先把数字i翻转到第一个数字 然后再把数字i翻转到(每轮操作)最后的位置
                //记录翻转操作
                res.push_back(idx);
                res.push_back(i);
                //对应操作数组
                reverse(A.begin(), A.begin() + idx);
                reverse(A.begin(), A.begin() + i);
            }
        }
        return res;
    }
};


