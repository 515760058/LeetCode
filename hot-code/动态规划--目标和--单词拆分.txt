494. 目标和
给定一个非负整数数组，a1, a2, ..., an, 和一个目标数，S。现在你有两个符号 + 和 -。对于数组中的任意一个整数，你都可以从 + 或 -中选择一个符号添加在前面。
返回可以使最终数组和为目标数 S 的所有添加符号的方法数。
class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int S) {
        int res = 0;
        dfs(nums, 0, 0, S, res);
        return res;
    }
private:
    void dfs(vector<int>& nums, int idx, int sum, int target, int& res) {
        if (idx == nums.size()) {
            if (sum == target) { // 到最后一个 且和是target
                res++;
            }
            return;
        }
        dfs(nums, idx+1, sum+nums[idx], target, res); // +nums[idx]
        dfs(nums, idx+1, sum-nums[idx], target, res); // -nums[idx]
    }
};



139. 单词拆分
给定一个非空字符串 s 和一个包含非空单词的列表 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词。
输入: s = "leetcode", wordDict = ["leet", "code"]    输出: true     解释: 返回 true 因为 "leetcode" 可以被拆分成 "leet code"。
输入: s = "applepenapple", wordDict = ["apple", "pen"]   输出: true   解释: 返回 true 因为 "applepenapple" 可以被拆分成 "apple pen apple"。  注意你可以重复使用字典中的单词。
class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        unordered_set<string> m(wordDict.begin(), wordDict.end());
        // dp[i] 表示字符串s的前i个字符能否拆分成wordDict
        vector<bool> dp(s.size()+1, false);
        dp[0] = true;
        for (int i = 1; i <= s.size(); ++i){
            for (int j = 0; j < i; ++j) {
                // 前j个字符可以拆分 && 子串[j~i]也在字典中可以拆分
                if (dp[j] && m.count(s.substr(j, i-j))){
                    dp[i] = true; // 前i个字符可以拆分
                    break;
                }
            }
        }
        return dp[s.size()];
    }
};
// 进一步优化：不需要每次都从j=0开始搜索，可以遍历字典中的单词从而决定每次的位置j


