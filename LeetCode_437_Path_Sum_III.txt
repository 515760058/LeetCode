/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
// 双层遍历
class Solution {
public:
    int pathSum(TreeNode* root, int sum) {
        int res = 0;
        preOrder(root, sum, res);
        return res;
    }

private:
    // 第一层遍历：先序遍历每一个节点(为了把每一个节点都当做根节点处理)
    void preOrder(TreeNode* root, int sum, int& res){
        if (root == NULL) {
            return;
        }
        // 前序遍历
        findPath(root, sum, res); // 从该节点开始第二层遍历 路径和为sum的数量
        preOrder(root->left, sum, res);
        preOrder(root->right, sum, res);
    }

    // 第二层遍历：从该节点开始，路径和等于sum的数量res
    void findPath(TreeNode* root, int sum, int& res){
        if (root == NULL) {
            return;
        }
        if (root->val == sum) { // 当前路径可以
            ++res;
        }
        //继续往左右子树递归，注意sum - root->val
        findPath(root->left,  sum - root->val, res);
        findPath(root->right, sum - root->val, res);
    }
};