// 有向图转成无向图  然后从位置0开始BFS遍历
// 每次遍历到下一个节点 检查这一条边的方向是不是正确的 不正确的就需要记录下来
class Solution {
public:
    int minReorder(int n, vector<vector<int>>& connections) {
        // 转成无向图
        vector<vector<pair<int,bool>>> graph(n);
        for(auto& c : connections){
            graph[c[0]].push_back( {c[1], true} ); // c[0]-->c[1]是真实路径
            graph[c[1]].push_back( {c[0], false} ); // c[1]-->c[0]是虚拟路径
        }

        int res = 0;
        // BFS
        queue<int> q { {0} };
        set<int> visited {0};
        while (!q.empty()) {
            int start = q.front();
            q.pop();
            for (pair<int,bool>& p : graph[start]) {
                // 已访问过该节点
                if (visited.count(p.first)) {
                    continue;
                }
                // 从start到p.first的路径是反的(真实的)
                if (p.second) {
                    ++res;
                }
                // 入队 标记已访问
                q.push(p.first);
                visited.insert(p.first);
            }
        }
        return res;
    }
};