/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
/*
大多答案都是通过遍历来求解  非中序遍历的解法 思路：
  先得出右子树的节点个数，如果恰好等于k-1，则说明该节点为第k大的节点；
  如果右子树节点个数大于k-1则继续搜索右子树第k大节点；
  如果右子树节点个数小于k-1，则搜索左子树中第k-numright-1大的节点；
*/
class Solution {
public:
    int kthLargest(TreeNode* root, int k) {
        int numright= nodeNum(root->right);
        if (numright == k-1) {
            return root->val;
        } else if (numright > k-1) {
            return kthLargest(root->right, k);
        } else {
            return kthLargest(root->left, k-numright-1);
        }
    }

private:
    int nodeNum(TreeNode* root){
        if (root == nullptr) {
            return 0;
        }
        return 1 + nodeNum(root->left) + nodeNum(root->right);
    }
};