//回溯法
class Solution {
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        set<vector<int>> res; // set保存结果 并去重
        // 回溯法
        vector<int> temp;
        backTrace(0, target, temp, candidates, res);

        // 转换结果 set转为vector
        vector<vector<int>> finalRes(res.begin(), res.end());
        return finalRes;
    }

private:
    // idx：在candidates数组中的起始下标（每个数字只能使用一次）
    // target：当前的目标和   temp：当前的组合
    void backTrace(int idx, int target, vector<int>& temp, vector<int>& candidates, set<vector<int>>& res) {
        // 当前的和 已经超过目标和了
        if (target < 0) {
            return;
        }
        // 一个合法的组合
        if (target == 0) {
            // 排序后 在集合中去重
            vector<int> aa(temp.begin(), temp.end());
            sort(aa.begin(), aa.end());
            res.insert(aa);
            return;
        }
        // 从下一个数字开始 进入下一层
        for (int i = idx; i < candidates.size(); ++i) {
            temp.push_back(candidates[i]); // 放入
            backTrace(i+1, target-candidates[i], temp, candidates, res); // 下一个数字 下一层
            temp.pop_back(); // 弹出
        }
    }
};