// 把每一个单元都扩增成3*3的区域 其中使用1表示街道  如下所对应的：
//  1      2      3     4     5     6
// 000    010    000   000   010   010
// 111    010    110   011   110   011
// 000    010    010   010   000   000
// 扩增之后 使用dfs/bfs能否到达右下方的单元格即可
class Solution {
public:
    bool hasValidPath(vector<vector<int>>& grid) {
        int row = grid.size();
        int col = grid[0].size();
        vector<vector<int>> graph(3*row, vector<int>(3*col, 0));
        for (int i = 1; i <= 3*row ; i += 3) {
            for (int j = 1; j <= 3*col; j += 3) {
                fill(graph, i, j, grid[i/3][j/3]);
            }
        }
        
        //for (vector<int>& vec : graph) {
        //    for (int i : vec) {
        //        cout << i << " ";
        //    }
        //    cout << endl;
        //}
        
        // 在扩增图中 从[1, 1]开始dfs
        dfs(graph, 1, 1);
        return graph[3*row-2][3*col-2] == 0;
    }

private:
    void dfs(vector<vector<int>>& graph, int x, int y) {
        if (x < 0 || x >= graph.size() || y < 0 || y >= graph[0].size()) {
            return;
        }
        if (graph[x][y] == 0) {
            return;
        }
        // 抹掉这条路
        graph[x][y] = 0;
        // 继续向下递归
        for (int i = 0; i < dirX.size(); ++i) {
            int xx = x + dirX[i];
            int yy = y + dirY[i];
            dfs(graph, xx, yy);
        }
    }

    void fill(vector<vector<int>>& graph, int i, int j, int street) {
        graph[i][j] = 1;
        if (street == 1)      { graph[i][j-1] = graph[i][j+1] = 1; }
        else if (street == 2) { graph[i-1][j] = graph[i+1][j] = 1; }
        else if (street == 3) { graph[i][j-1] = graph[i+1][j] = 1; }
        else if (street == 4) { graph[i+1][j] = graph[i][j+1] = 1; }
        else if (street == 5) { graph[i][j-1] = graph[i-1][j] = 1; }
        else if (street == 6) { graph[i-1][j] = graph[i][j+1] = 1; }
    }

    // 上下左右 四个方向
    vector<int> dirX {-1, 1, 0,  0};
    vector<int> dirY { 0, 0, -1, 1};
};