/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/
// 方法1: 可以使用层序遍历 但是O(n)的复杂度

// 方法2: 对于某个节点, 其左子节点的next指针就是其右子节点
//                     其右子节点的next指针就是其next节点的左子节点

class Solution {
public:
    Node* connect(Node* root) {
        if (root == nullptr) {
            return nullptr;
        }
        // 处理左子节点(有左子节点就一定有右子节点)
        if (root->left != nullptr) {
            root->left->next = root->right;
        }
        // 处理右子节点
        if (root->right != nullptr && root->next != nullptr) {
            root->right->next = root->next->left;
        }
        // 向下递归
        connect(root->left);
        connect(root->right);
        return root;
    }
};