// leetcode198打家劫舍 的升级版
// 本题的思路是：如果偷了第一家 则不能偷最后一家
//               如果不偷第一家 则可以偷最后一家
class Solution {
public:
    int rob(vector<int>& nums) {
        if (nums.empty()) {
            return 0;
        }
        if (nums.size() == 1) {
            return nums[0];
        }
        if (nums.size() == 2) {
            return max(nums[0], nums[1]);
        }
        // dp
        // 偷了第一家 则不能偷最后一家
        vector<int> dp1(nums.size()-1, 0);
        dp1[0] = nums[0];
        dp1[1] = max(nums[0], nums[1]);
        for (int i = 2; i < dp1.size(); ++i) {
            dp1[i] = max(dp1[i-2]+nums[i], dp1[i-1]);
        }

        // 不偷第一家 则可以偷最后一家
        vector<int> dp2(nums.size(), 0);
        dp2[0] = 0;
        dp2[1] = nums[1];
        for (int i = 2; i < dp2.size(); ++i) {
            dp2[i] = max(dp2[i-2]+nums[i], dp2[i-1]);
        }
        
        return max(dp1.back(), dp2.back());
    }
};