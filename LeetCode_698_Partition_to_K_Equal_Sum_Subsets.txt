/*
    如果k=1，说明此时只需要组一个子集合，那么当前的就是了，直接返回true。
    如果curSum等于target了，那么我们再次调用递归，此时传入k-1，start和curSum都重置为0，因为我们当前又找到了一个和为target的子集合，要开始继续找下一个。否则的话就从start开始遍历数组，如果当前数字已经访问过了则直接跳过，否则标记为已访问。然后调用递归函数，k保持不变，因为还在累加当前的子集合，start传入i+1，curSum传入curSum+nums[i]，因为要累加当前的数字，如果递归函数返回true了，则直接返回true。否则就将当前数字重置为未访问的状态继续遍历
需要注意的是需要添加start做位index的起始点，否者会超时

建议和leetcode 416. Partition Equal Subset Sum 动态规划DP + DFS深度优先遍历 一起学习
leetcode473 火柴拼正方形(划分为4个相等的集合)
*/
class Solution {
public:
    bool canPartitionKSubsets(vector<int>& nums, int k) {
        // 总长度 是否是k的倍数
        int sum = accumulate(nums.begin(), nums.end(), 0);
        if (sum % k != 0) {
            return false;
        }
        // 回溯
        vector<bool> visit(nums.size(), false);
        return backTrace(nums, k, sum/k, 0, 0, visit);
    }
    
private:
    // 回溯法  每次选一个数字 填到当前的集合中
    bool backTrace(vector<int>& nums, int k, int target, int start, int curSum, vector<bool>& visited) {
        if (k == 1){
            return true;
        } else if (curSum > target){
            return false;
        } else if (curSum == target){
            return backTrace(nums, k-1, target, 0, 0, visited);
        } else {
            for (int i = start; i < nums.size(); ++i) {
                if (visited[i] == false) { // 未使用过这个数
                    // 使用这个数
                    visited[i] = true;
                    bool res = backTrace(nums, k, target, i+1, curSum+nums[i], visited);
                    if (res) {
                        return true;
                    }
                    visited[i] = false;
                }
            }
        }
        return false;
    }
};