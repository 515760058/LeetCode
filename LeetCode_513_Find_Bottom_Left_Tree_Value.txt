/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
// 层序遍历 bfs实现
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) {
        vector<vector<int>> level;
        bfs(root, level);
        return level.back().front();
    }

private:
    void bfs(TreeNode* root, vector<vector<int>>& level) {
        int depth = 0;
        queue<TreeNode*> q { {root} };
        while (!q.empty()) {
            if (depth >= level.size()) {
                level.push_back( {} );
            }
            int size = q.size();
            for (int i = 0; i < size; ++i) {
                TreeNode* node = q.front();
                q.pop();
                level[depth].push_back(node->val);
                if (node->left != nullptr) {
                    q.push(node->left);
                }
                if (node->right != nullptr) {
                    q.push(node->right);
                }
            }
            depth++;
        }
    }
};

/*
// 层序遍历 递归实现
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) {
        vector<vector<int>> level;
        preOrder(root, 0, level);
        return level.back().front();
    }

private:
    void preOrder(TreeNode* root, int depth, vector<vector<int>>& level) {
        if (root == nullptr) {
            return;
        }
        if (depth >= level.size()) {
            level.push_back( {} );
        }
        level[depth].push_back(root->val);
        preOrder(root->left, depth+1, level);
        preOrder(root->right, depth+1, level);
    }
};
*/