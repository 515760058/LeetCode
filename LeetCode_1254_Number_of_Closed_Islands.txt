// DFS
// 先从四条边开始 利用DFS把边上的岛屿(0)都清除掉 再使用DFS统计中间的岛屿(0)数量
class Solution {
public:
    int closedIsland(vector<vector<int>>& grid) {
        for (int i = 0; i < grid.size(); ++i) {
            for (int j = 0; j < grid[0].size(); ++j) {
                if (i == 0 || i == grid.size()-1 || j == 0 || j == grid[0].size()-1) {
                    dfs(grid, i, j);
                }
            }
        }

        int cnt = 0;
        for (int i = 0; i < grid.size(); ++i) {
            for (int j = 0; j < grid[0].size(); ++j) {
                if (grid[i][j] == 0) {
                    dfs(grid, i, j);
                    ++cnt;
                }
            }
        }
        return cnt;
    }

private:
    void dfs(vector<vector<int>>& grid, int i, int j) {
        if (i < 0 || i >= grid.size() || j < 0 || j >= grid[0].size()) {
            return;
        }
        if (grid[i][j] != 0) {
            return;
        }
        grid[i][j] = 1;
        dfs(grid, i+1, j);
        dfs(grid, i-1, j);
        dfs(grid, i, j-1);
        dfs(grid, i, j+1);
    }
};