//LeetCode15 三数之和
//LeetCode16

//多指针法：
链接：https://leetcode-cn.com/problems/4sum/solution/si-shu-qiu-he-shuang-zhi-zhen-fa-c-by-jiacheng6/
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> result;
        if(nums.size()<4)
             return result;
        
        size_t n_size = nums.size();
        sort(nums.begin(), nums.end());

        for(int i=0; i<n_size-3; i++){
            // 不存在
            if(target<=0 && nums[i]>0) break;
            if(nums[i]+nums[i+1]+nums[i+2]+nums[i+3]>target) break;
            // 此时条件不满足
            if(nums[i]+nums[n_size-3]+nums[n_size-2]+nums[n_size-1]<target) continue;
            // 重复项
            if(i>0 && nums[i]==nums[i-1]) continue;

            for(int j=i+1; j<n_size-2; j++){
                // 不存在
                if(nums[i]+nums[j]+nums[j+1]+nums[j+2]>target) break;
                // 此时条件不满足
                if(nums[i]+nums[j]+nums[n_size-2]+nums[n_size-1]<target) continue;
                // 重复项
                if(j>i+1 && nums[j]==nums[j-1]) continue;

                int start=j+1, end=n_size-1;
                while(start<end){
                    int sum = nums[i]+nums[j]+nums[start]+nums[end];
                    if(sum<target) start++;
                    else if(sum>target) end--;
                    else{
                        result.push_back({nums[i], nums[j], nums[start], nums[end]});
                        int last_start=start, last_end=end;
                        // 剔除重复项
                        while(start<end && nums[start] == nums[last_start]) start++;
                        while(start<end && nums[end] == nums[last_end]) end--;
                    }
                }
            }
        }
        return result;
    }
};

//回溯法  超时了
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        sort(nums.begin(), nums.end());//排序
        
        set<vector<int>> res;//使用集合去除重复
        vector<int> temp;
        recall(nums, res, temp, target, 0);
        
        vector<vector<int>> fin_res(res.begin(), res.end());//把集合转换成vector
        return fin_res;
    }
private:
    //target: a+b+c+d的和
    void recall(vector<int>& nums, set<vector<int>>& res, vector<int>& temp, int target, int start){
        if(temp.size() == 4){
            if(target == temp[0] + temp[1] + temp[2] + temp[3]){
                res.insert(temp);
            }
            return;
        } 
        for(int i = start; i < nums.size(); ++i){
            temp.push_back(nums[i]);
            recall(nums, res, temp, target, i+1);
            temp.pop_back();
        }
    }
};