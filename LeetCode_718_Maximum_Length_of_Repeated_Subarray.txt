// 动态规划  子序列默认可以不连续  子数组默认是连续的
/*
      3 2 1 4 7
--| -----------
  | 0 0 0 0 0 0  // 辅助行  同理第一列也是辅助列
1 | 0 0 0 1 0 0
2 | 0 0 1 0 0 0
3 | 0 1 0 0 0 0
2 | 0 0 2 0 0 0
1 | 0 0 0 3 0 0

*/ 
class Solution {
public:
    int findLength(vector<int>& A, vector<int>& B) {
        int row = A.size();
        int col = B.size();
        vector<vector<int>> dp(row+1, vector<int>(col+1, 0));
        for (int i = 1; i <= row; ++i) {
            for (int j = 1; j <=col; ++j) {
                if (A[i-1] == B[j-1]) {
                    dp[i][j] = dp[i-1][j-1] + 1; // 左上角的dp值+1
                }
            }
        }
        // 找dp中的最大值
        int res = 0;
        for (auto& vec : dp) {
            int temp = *max_element(vec.begin(), vec.end());
            res = max(res, temp);
        }
        return res;
    }
};