//按字符串的长度排序
bool cmp(string& s1, string& s2){
    return s1.length() > s2.length();
}

class Solution {
public:
    string frequencySort(string s) {
        //统计每个字符出现的次数
        map<char, int> m;
        for(char c : s){
            ++m[c];
        }
        //根据出现次数，生成每个小字符串
        vector<string> v;
        for(auto it : m){
            string str(it.second, it.first);
            v.push_back(str);
        }
        //按字符串的长度排序 长的在前，短的在后
        sort(v.begin(), v.end(), cmp);
        //拼接结果
        return accumulate(v.begin(), v.end(), string(""));
    }     
};