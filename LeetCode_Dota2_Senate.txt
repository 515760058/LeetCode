// priority_queue<int> h; 大顶堆 弹出的数据是最大值
class Solution {
public:
    string predictPartyVictory(string senate) {
        // 建立最小堆(小顶堆, 弹出的数据是最小值) 保存下标
        priority_queue<int, std::vector<int>, std::greater<int>> r, d;
        for (int i = 0; i < senate.size(); ++i) {
            if (senate[i] == 'D') {
                d.push(i);
            } else {
                r.push(i);
            }
        }

        // 每次选出最前面(下标最小)的一个人 禁止一个对手的权力
        while (!d.empty() && !r.empty()) {
            if (d.top() < r.top()) {
                // 禁止一个对手(让他出局)
                r.pop();
                // 同时把这个人移动到最后
                int idx = d.top();  d.pop();
                d.push(idx + senate.size());
            } else {
                // 禁止一个对手(让他出局)
                d.pop();
                // 同时把这个人移动到最后
                int idx = r.top();  r.pop();
                r.push(idx + senate.size());
            }
        }

        return d.empty() ? "Radiant" : "Dire";
    }
};
